// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace messaging {
constexpr MotorCmds_msg::MotorCmds_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fr_hip_(nullptr)
  , fr_thigh_(nullptr)
  , fr_calf_(nullptr)
  , fl_hip_(nullptr)
  , fl_thigh_(nullptr)
  , fl_calf_(nullptr)
  , rr_hip_(nullptr)
  , rr_thigh_(nullptr)
  , rr_calf_(nullptr)
  , rl_hip_(nullptr)
  , rl_thigh_(nullptr)
  , rl_calf_(nullptr)
  , time_(0){}
struct MotorCmds_msgDefaultTypeInternal {
  constexpr MotorCmds_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorCmds_msgDefaultTypeInternal() {}
  union {
    MotorCmds_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorCmds_msgDefaultTypeInternal _MotorCmds_msg_default_instance_;
constexpr MotorCmd_msg::MotorCmd_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kp_(0)
  , kd_(0)
  , pos_(0)
  , vel_(0)
  , tau_(0){}
struct MotorCmd_msgDefaultTypeInternal {
  constexpr MotorCmd_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorCmd_msgDefaultTypeInternal() {}
  union {
    MotorCmd_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorCmd_msgDefaultTypeInternal _MotorCmd_msg_default_instance_;
constexpr MotorReadings_msg::MotorReadings_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : torques_(nullptr)
  , positions_(nullptr)
  , velocities_(nullptr)
  , time_(0){}
struct MotorReadings_msgDefaultTypeInternal {
  constexpr MotorReadings_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotorReadings_msgDefaultTypeInternal() {}
  union {
    MotorReadings_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotorReadings_msgDefaultTypeInternal _MotorReadings_msg_default_instance_;
constexpr Motor_msg::Motor_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fr_hip_(0)
  , fr_thigh_(0)
  , fr_calf_(0)
  , fl_hip_(0)
  , fl_thigh_(0)
  , fl_calf_(0)
  , rr_hip_(0)
  , rr_thigh_(0)
  , rr_calf_(0)
  , rl_hip_(0)
  , rl_thigh_(0)
  , rl_calf_(0)
  , time_(0){}
struct Motor_msgDefaultTypeInternal {
  constexpr Motor_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Motor_msgDefaultTypeInternal() {}
  union {
    Motor_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Motor_msgDefaultTypeInternal _Motor_msg_default_instance_;
constexpr EKF_msg::EKF_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , quaternion_(nullptr)
  , velocity_(nullptr)
  , acceleration_bias_(nullptr)
  , angular_velocity_bias_(nullptr)
  , angular_velocity_(nullptr)
  , time_(0){}
struct EKF_msgDefaultTypeInternal {
  constexpr EKF_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EKF_msgDefaultTypeInternal() {}
  union {
    EKF_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EKF_msgDefaultTypeInternal _EKF_msg_default_instance_;
constexpr IMU_msg::IMU_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acceleration_(nullptr)
  , gyroscope_(nullptr)
  , time_(0){}
struct IMU_msgDefaultTypeInternal {
  constexpr IMU_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMU_msgDefaultTypeInternal() {}
  union {
    IMU_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMU_msgDefaultTypeInternal _IMU_msg_default_instance_;
constexpr Vicon_msg::Vicon_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , quaternion_(nullptr)
  , time_(0){}
struct Vicon_msgDefaultTypeInternal {
  constexpr Vicon_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vicon_msgDefaultTypeInternal() {}
  union {
    Vicon_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vicon_msgDefaultTypeInternal _Vicon_msg_default_instance_;
constexpr Vector3_msg::Vector3_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3_msgDefaultTypeInternal {
  constexpr Vector3_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3_msgDefaultTypeInternal() {}
  union {
    Vector3_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3_msgDefaultTypeInternal _Vector3_msg_default_instance_;
constexpr Quaternion_msg::Quaternion_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Quaternion_msgDefaultTypeInternal {
  constexpr Quaternion_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Quaternion_msgDefaultTypeInternal() {}
  union {
    Quaternion_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Quaternion_msgDefaultTypeInternal _Quaternion_msg_default_instance_;
}  // namespace messaging
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, fr_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, fr_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, fr_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, fl_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, fl_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, fl_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, rr_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, rr_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, rr_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, rl_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, rl_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, rl_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmds_msg, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmd_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmd_msg, kp_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmd_msg, kd_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmd_msg, pos_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmd_msg, vel_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorCmd_msg, tau_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::MotorReadings_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::MotorReadings_msg, torques_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorReadings_msg, positions_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorReadings_msg, velocities_),
  PROTOBUF_FIELD_OFFSET(::messaging::MotorReadings_msg, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, fr_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, fr_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, fr_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, fl_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, fl_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, fl_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, rr_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, rr_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, rr_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, rl_hip_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, rl_thigh_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, rl_calf_),
  PROTOBUF_FIELD_OFFSET(::messaging::Motor_msg, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, position_),
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, quaternion_),
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, velocity_),
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, acceleration_bias_),
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, angular_velocity_bias_),
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::messaging::EKF_msg, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::IMU_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::IMU_msg, acceleration_),
  PROTOBUF_FIELD_OFFSET(::messaging::IMU_msg, gyroscope_),
  PROTOBUF_FIELD_OFFSET(::messaging::IMU_msg, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::Vicon_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::Vicon_msg, position_),
  PROTOBUF_FIELD_OFFSET(::messaging::Vicon_msg, quaternion_),
  PROTOBUF_FIELD_OFFSET(::messaging::Vicon_msg, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::Vector3_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::Vector3_msg, x_),
  PROTOBUF_FIELD_OFFSET(::messaging::Vector3_msg, y_),
  PROTOBUF_FIELD_OFFSET(::messaging::Vector3_msg, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::Quaternion_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::Quaternion_msg, w_),
  PROTOBUF_FIELD_OFFSET(::messaging::Quaternion_msg, x_),
  PROTOBUF_FIELD_OFFSET(::messaging::Quaternion_msg, y_),
  PROTOBUF_FIELD_OFFSET(::messaging::Quaternion_msg, z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::messaging::MotorCmds_msg)},
  { 18, -1, sizeof(::messaging::MotorCmd_msg)},
  { 28, -1, sizeof(::messaging::MotorReadings_msg)},
  { 37, -1, sizeof(::messaging::Motor_msg)},
  { 55, -1, sizeof(::messaging::EKF_msg)},
  { 67, -1, sizeof(::messaging::IMU_msg)},
  { 75, -1, sizeof(::messaging::Vicon_msg)},
  { 83, -1, sizeof(::messaging::Vector3_msg)},
  { 91, -1, sizeof(::messaging::Quaternion_msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_MotorCmds_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_MotorCmd_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_MotorReadings_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_Motor_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_EKF_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_IMU_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_Vicon_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_Vector3_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_Quaternion_msg_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\tmessaging\"\225\004\n\rMotorCmds"
  "_msg\022\'\n\006FR_Hip\030\001 \001(\0132\027.messaging.MotorCm"
  "d_msg\022)\n\010FR_Thigh\030\002 \001(\0132\027.messaging.Moto"
  "rCmd_msg\022(\n\007FR_Calf\030\003 \001(\0132\027.messaging.Mo"
  "torCmd_msg\022\'\n\006FL_Hip\030\004 \001(\0132\027.messaging.M"
  "otorCmd_msg\022)\n\010FL_Thigh\030\005 \001(\0132\027.messagin"
  "g.MotorCmd_msg\022(\n\007FL_Calf\030\006 \001(\0132\027.messag"
  "ing.MotorCmd_msg\022\'\n\006RR_Hip\030\007 \001(\0132\027.messa"
  "ging.MotorCmd_msg\022)\n\010RR_Thigh\030\010 \001(\0132\027.me"
  "ssaging.MotorCmd_msg\022(\n\007RR_Calf\030\t \001(\0132\027."
  "messaging.MotorCmd_msg\022\'\n\006RL_Hip\030\n \001(\0132\027"
  ".messaging.MotorCmd_msg\022)\n\010RL_Thigh\030\013 \001("
  "\0132\027.messaging.MotorCmd_msg\022(\n\007RL_Calf\030\014 "
  "\001(\0132\027.messaging.MotorCmd_msg\022\014\n\004time\030\r \001"
  "(\001\"M\n\014MotorCmd_msg\022\n\n\002Kp\030\001 \001(\001\022\n\n\002Kd\030\002 \001"
  "(\001\022\013\n\003pos\030\003 \001(\001\022\013\n\003vel\030\004 \001(\001\022\013\n\003tau\030\005 \001("
  "\001\"\233\001\n\021MotorReadings_msg\022%\n\007torques\030\001 \001(\013"
  "2\024.messaging.Motor_msg\022\'\n\tpositions\030\002 \001("
  "\0132\024.messaging.Motor_msg\022(\n\nvelocities\030\003 "
  "\001(\0132\024.messaging.Motor_msg\022\014\n\004time\030\005 \001(\001\""
  "\345\001\n\tMotor_msg\022\016\n\006FR_Hip\030\001 \001(\001\022\020\n\010FR_Thig"
  "h\030\002 \001(\001\022\017\n\007FR_Calf\030\003 \001(\001\022\016\n\006FL_Hip\030\004 \001(\001"
  "\022\020\n\010FL_Thigh\030\005 \001(\001\022\017\n\007FL_Calf\030\006 \001(\001\022\016\n\006R"
  "R_Hip\030\007 \001(\001\022\020\n\010RR_Thigh\030\010 \001(\001\022\017\n\007RR_Calf"
  "\030\t \001(\001\022\016\n\006RL_Hip\030\n \001(\001\022\020\n\010RL_Thigh\030\013 \001(\001"
  "\022\017\n\007RL_Calf\030\014 \001(\001\022\014\n\004time\030\r \001(\001\"\266\002\n\007EKF_"
  "msg\022(\n\010position\030\001 \001(\0132\026.messaging.Vector"
  "3_msg\022-\n\nquaternion\030\002 \001(\0132\031.messaging.Qu"
  "aternion_msg\022(\n\010velocity\030\003 \001(\0132\026.messagi"
  "ng.Vector3_msg\0221\n\021acceleration_bias\030\004 \001("
  "\0132\026.messaging.Vector3_msg\0225\n\025angular_vel"
  "ocity_bias\030\005 \001(\0132\026.messaging.Vector3_msg"
  "\0220\n\020angular_velocity\030\006 \001(\0132\026.messaging.V"
  "ector3_msg\022\014\n\004time\030\007 \001(\001\"p\n\007IMU_msg\022,\n\014a"
  "cceleration\030\001 \001(\0132\026.messaging.Vector3_ms"
  "g\022)\n\tgyroscope\030\002 \001(\0132\026.messaging.Vector3"
  "_msg\022\014\n\004time\030\003 \001(\001\"r\n\tVicon_msg\022(\n\010posit"
  "ion\030\001 \001(\0132\026.messaging.Vector3_msg\022-\n\nqua"
  "ternion\030\002 \001(\0132\031.messaging.Quaternion_msg"
  "\022\014\n\004time\030\003 \001(\001\".\n\013Vector3_msg\022\t\n\001x\030\001 \001(\001"
  "\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"<\n\016Quaternion_msg"
  "\022\t\n\001w\030\001 \001(\001\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004"
  " \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 1692, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace messaging {

// ===================================================================

class MotorCmds_msg::_Internal {
 public:
  static const ::messaging::MotorCmd_msg& fr_hip(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& fr_thigh(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& fr_calf(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& fl_hip(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& fl_thigh(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& fl_calf(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& rr_hip(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& rr_thigh(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& rr_calf(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& rl_hip(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& rl_thigh(const MotorCmds_msg* msg);
  static const ::messaging::MotorCmd_msg& rl_calf(const MotorCmds_msg* msg);
};

const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::fr_hip(const MotorCmds_msg* msg) {
  return *msg->fr_hip_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::fr_thigh(const MotorCmds_msg* msg) {
  return *msg->fr_thigh_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::fr_calf(const MotorCmds_msg* msg) {
  return *msg->fr_calf_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::fl_hip(const MotorCmds_msg* msg) {
  return *msg->fl_hip_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::fl_thigh(const MotorCmds_msg* msg) {
  return *msg->fl_thigh_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::fl_calf(const MotorCmds_msg* msg) {
  return *msg->fl_calf_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::rr_hip(const MotorCmds_msg* msg) {
  return *msg->rr_hip_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::rr_thigh(const MotorCmds_msg* msg) {
  return *msg->rr_thigh_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::rr_calf(const MotorCmds_msg* msg) {
  return *msg->rr_calf_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::rl_hip(const MotorCmds_msg* msg) {
  return *msg->rl_hip_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::rl_thigh(const MotorCmds_msg* msg) {
  return *msg->rl_thigh_;
}
const ::messaging::MotorCmd_msg&
MotorCmds_msg::_Internal::rl_calf(const MotorCmds_msg* msg) {
  return *msg->rl_calf_;
}
MotorCmds_msg::MotorCmds_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.MotorCmds_msg)
}
MotorCmds_msg::MotorCmds_msg(const MotorCmds_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fr_hip()) {
    fr_hip_ = new ::messaging::MotorCmd_msg(*from.fr_hip_);
  } else {
    fr_hip_ = nullptr;
  }
  if (from._internal_has_fr_thigh()) {
    fr_thigh_ = new ::messaging::MotorCmd_msg(*from.fr_thigh_);
  } else {
    fr_thigh_ = nullptr;
  }
  if (from._internal_has_fr_calf()) {
    fr_calf_ = new ::messaging::MotorCmd_msg(*from.fr_calf_);
  } else {
    fr_calf_ = nullptr;
  }
  if (from._internal_has_fl_hip()) {
    fl_hip_ = new ::messaging::MotorCmd_msg(*from.fl_hip_);
  } else {
    fl_hip_ = nullptr;
  }
  if (from._internal_has_fl_thigh()) {
    fl_thigh_ = new ::messaging::MotorCmd_msg(*from.fl_thigh_);
  } else {
    fl_thigh_ = nullptr;
  }
  if (from._internal_has_fl_calf()) {
    fl_calf_ = new ::messaging::MotorCmd_msg(*from.fl_calf_);
  } else {
    fl_calf_ = nullptr;
  }
  if (from._internal_has_rr_hip()) {
    rr_hip_ = new ::messaging::MotorCmd_msg(*from.rr_hip_);
  } else {
    rr_hip_ = nullptr;
  }
  if (from._internal_has_rr_thigh()) {
    rr_thigh_ = new ::messaging::MotorCmd_msg(*from.rr_thigh_);
  } else {
    rr_thigh_ = nullptr;
  }
  if (from._internal_has_rr_calf()) {
    rr_calf_ = new ::messaging::MotorCmd_msg(*from.rr_calf_);
  } else {
    rr_calf_ = nullptr;
  }
  if (from._internal_has_rl_hip()) {
    rl_hip_ = new ::messaging::MotorCmd_msg(*from.rl_hip_);
  } else {
    rl_hip_ = nullptr;
  }
  if (from._internal_has_rl_thigh()) {
    rl_thigh_ = new ::messaging::MotorCmd_msg(*from.rl_thigh_);
  } else {
    rl_thigh_ = nullptr;
  }
  if (from._internal_has_rl_calf()) {
    rl_calf_ = new ::messaging::MotorCmd_msg(*from.rl_calf_);
  } else {
    rl_calf_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:messaging.MotorCmds_msg)
}

inline void MotorCmds_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fr_hip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&fr_hip_)) + sizeof(time_));
}

MotorCmds_msg::~MotorCmds_msg() {
  // @@protoc_insertion_point(destructor:messaging.MotorCmds_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorCmds_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fr_hip_;
  if (this != internal_default_instance()) delete fr_thigh_;
  if (this != internal_default_instance()) delete fr_calf_;
  if (this != internal_default_instance()) delete fl_hip_;
  if (this != internal_default_instance()) delete fl_thigh_;
  if (this != internal_default_instance()) delete fl_calf_;
  if (this != internal_default_instance()) delete rr_hip_;
  if (this != internal_default_instance()) delete rr_thigh_;
  if (this != internal_default_instance()) delete rr_calf_;
  if (this != internal_default_instance()) delete rl_hip_;
  if (this != internal_default_instance()) delete rl_thigh_;
  if (this != internal_default_instance()) delete rl_calf_;
}

void MotorCmds_msg::ArenaDtor(void* object) {
  MotorCmds_msg* _this = reinterpret_cast< MotorCmds_msg* >(object);
  (void)_this;
}
void MotorCmds_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorCmds_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorCmds_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.MotorCmds_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && fr_hip_ != nullptr) {
    delete fr_hip_;
  }
  fr_hip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fr_thigh_ != nullptr) {
    delete fr_thigh_;
  }
  fr_thigh_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fr_calf_ != nullptr) {
    delete fr_calf_;
  }
  fr_calf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fl_hip_ != nullptr) {
    delete fl_hip_;
  }
  fl_hip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fl_thigh_ != nullptr) {
    delete fl_thigh_;
  }
  fl_thigh_ = nullptr;
  if (GetArenaForAllocation() == nullptr && fl_calf_ != nullptr) {
    delete fl_calf_;
  }
  fl_calf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rr_hip_ != nullptr) {
    delete rr_hip_;
  }
  rr_hip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rr_thigh_ != nullptr) {
    delete rr_thigh_;
  }
  rr_thigh_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rr_calf_ != nullptr) {
    delete rr_calf_;
  }
  rr_calf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rl_hip_ != nullptr) {
    delete rl_hip_;
  }
  rl_hip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rl_thigh_ != nullptr) {
    delete rl_thigh_;
  }
  rl_thigh_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rl_calf_ != nullptr) {
    delete rl_calf_;
  }
  rl_calf_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorCmds_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messaging.MotorCmd_msg FR_Hip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fr_hip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg FR_Thigh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fr_thigh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg FR_Calf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fr_calf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg FL_Hip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fl_hip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg FL_Thigh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fl_thigh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg FL_Calf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fl_calf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg RR_Hip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rr_hip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg RR_Thigh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rr_thigh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg RR_Calf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rr_calf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg RL_Hip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rl_hip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg RL_Thigh = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_rl_thigh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.MotorCmd_msg RL_Calf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rl_calf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorCmds_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.MotorCmds_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .messaging.MotorCmd_msg FR_Hip = 1;
  if (this->_internal_has_fr_hip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fr_hip(this), target, stream);
  }

  // .messaging.MotorCmd_msg FR_Thigh = 2;
  if (this->_internal_has_fr_thigh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fr_thigh(this), target, stream);
  }

  // .messaging.MotorCmd_msg FR_Calf = 3;
  if (this->_internal_has_fr_calf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::fr_calf(this), target, stream);
  }

  // .messaging.MotorCmd_msg FL_Hip = 4;
  if (this->_internal_has_fl_hip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fl_hip(this), target, stream);
  }

  // .messaging.MotorCmd_msg FL_Thigh = 5;
  if (this->_internal_has_fl_thigh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fl_thigh(this), target, stream);
  }

  // .messaging.MotorCmd_msg FL_Calf = 6;
  if (this->_internal_has_fl_calf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fl_calf(this), target, stream);
  }

  // .messaging.MotorCmd_msg RR_Hip = 7;
  if (this->_internal_has_rr_hip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rr_hip(this), target, stream);
  }

  // .messaging.MotorCmd_msg RR_Thigh = 8;
  if (this->_internal_has_rr_thigh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::rr_thigh(this), target, stream);
  }

  // .messaging.MotorCmd_msg RR_Calf = 9;
  if (this->_internal_has_rr_calf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rr_calf(this), target, stream);
  }

  // .messaging.MotorCmd_msg RL_Hip = 10;
  if (this->_internal_has_rl_hip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rl_hip(this), target, stream);
  }

  // .messaging.MotorCmd_msg RL_Thigh = 11;
  if (this->_internal_has_rl_thigh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::rl_thigh(this), target, stream);
  }

  // .messaging.MotorCmd_msg RL_Calf = 12;
  if (this->_internal_has_rl_calf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rl_calf(this), target, stream);
  }

  // double time = 13;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.MotorCmds_msg)
  return target;
}

size_t MotorCmds_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.MotorCmds_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .messaging.MotorCmd_msg FR_Hip = 1;
  if (this->_internal_has_fr_hip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fr_hip_);
  }

  // .messaging.MotorCmd_msg FR_Thigh = 2;
  if (this->_internal_has_fr_thigh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fr_thigh_);
  }

  // .messaging.MotorCmd_msg FR_Calf = 3;
  if (this->_internal_has_fr_calf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fr_calf_);
  }

  // .messaging.MotorCmd_msg FL_Hip = 4;
  if (this->_internal_has_fl_hip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fl_hip_);
  }

  // .messaging.MotorCmd_msg FL_Thigh = 5;
  if (this->_internal_has_fl_thigh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fl_thigh_);
  }

  // .messaging.MotorCmd_msg FL_Calf = 6;
  if (this->_internal_has_fl_calf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fl_calf_);
  }

  // .messaging.MotorCmd_msg RR_Hip = 7;
  if (this->_internal_has_rr_hip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rr_hip_);
  }

  // .messaging.MotorCmd_msg RR_Thigh = 8;
  if (this->_internal_has_rr_thigh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rr_thigh_);
  }

  // .messaging.MotorCmd_msg RR_Calf = 9;
  if (this->_internal_has_rr_calf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rr_calf_);
  }

  // .messaging.MotorCmd_msg RL_Hip = 10;
  if (this->_internal_has_rl_hip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rl_hip_);
  }

  // .messaging.MotorCmd_msg RL_Thigh = 11;
  if (this->_internal_has_rl_thigh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rl_thigh_);
  }

  // .messaging.MotorCmd_msg RL_Calf = 12;
  if (this->_internal_has_rl_calf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rl_calf_);
  }

  // double time = 13;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorCmds_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorCmds_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorCmds_msg::GetClassData() const { return &_class_data_; }

void MotorCmds_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MotorCmds_msg *>(to)->MergeFrom(
      static_cast<const MotorCmds_msg &>(from));
}


void MotorCmds_msg::MergeFrom(const MotorCmds_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.MotorCmds_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fr_hip()) {
    _internal_mutable_fr_hip()->::messaging::MotorCmd_msg::MergeFrom(from._internal_fr_hip());
  }
  if (from._internal_has_fr_thigh()) {
    _internal_mutable_fr_thigh()->::messaging::MotorCmd_msg::MergeFrom(from._internal_fr_thigh());
  }
  if (from._internal_has_fr_calf()) {
    _internal_mutable_fr_calf()->::messaging::MotorCmd_msg::MergeFrom(from._internal_fr_calf());
  }
  if (from._internal_has_fl_hip()) {
    _internal_mutable_fl_hip()->::messaging::MotorCmd_msg::MergeFrom(from._internal_fl_hip());
  }
  if (from._internal_has_fl_thigh()) {
    _internal_mutable_fl_thigh()->::messaging::MotorCmd_msg::MergeFrom(from._internal_fl_thigh());
  }
  if (from._internal_has_fl_calf()) {
    _internal_mutable_fl_calf()->::messaging::MotorCmd_msg::MergeFrom(from._internal_fl_calf());
  }
  if (from._internal_has_rr_hip()) {
    _internal_mutable_rr_hip()->::messaging::MotorCmd_msg::MergeFrom(from._internal_rr_hip());
  }
  if (from._internal_has_rr_thigh()) {
    _internal_mutable_rr_thigh()->::messaging::MotorCmd_msg::MergeFrom(from._internal_rr_thigh());
  }
  if (from._internal_has_rr_calf()) {
    _internal_mutable_rr_calf()->::messaging::MotorCmd_msg::MergeFrom(from._internal_rr_calf());
  }
  if (from._internal_has_rl_hip()) {
    _internal_mutable_rl_hip()->::messaging::MotorCmd_msg::MergeFrom(from._internal_rl_hip());
  }
  if (from._internal_has_rl_thigh()) {
    _internal_mutable_rl_thigh()->::messaging::MotorCmd_msg::MergeFrom(from._internal_rl_thigh());
  }
  if (from._internal_has_rl_calf()) {
    _internal_mutable_rl_calf()->::messaging::MotorCmd_msg::MergeFrom(from._internal_rl_calf());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorCmds_msg::CopyFrom(const MotorCmds_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.MotorCmds_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorCmds_msg::IsInitialized() const {
  return true;
}

void MotorCmds_msg::InternalSwap(MotorCmds_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorCmds_msg, time_)
      + sizeof(MotorCmds_msg::time_)
      - PROTOBUF_FIELD_OFFSET(MotorCmds_msg, fr_hip_)>(
          reinterpret_cast<char*>(&fr_hip_),
          reinterpret_cast<char*>(&other->fr_hip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorCmds_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class MotorCmd_msg::_Internal {
 public:
};

MotorCmd_msg::MotorCmd_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.MotorCmd_msg)
}
MotorCmd_msg::MotorCmd_msg(const MotorCmd_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kp_, &from.kp_,
    static_cast<size_t>(reinterpret_cast<char*>(&tau_) -
    reinterpret_cast<char*>(&kp_)) + sizeof(tau_));
  // @@protoc_insertion_point(copy_constructor:messaging.MotorCmd_msg)
}

inline void MotorCmd_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tau_) -
    reinterpret_cast<char*>(&kp_)) + sizeof(tau_));
}

MotorCmd_msg::~MotorCmd_msg() {
  // @@protoc_insertion_point(destructor:messaging.MotorCmd_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorCmd_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotorCmd_msg::ArenaDtor(void* object) {
  MotorCmd_msg* _this = reinterpret_cast< MotorCmd_msg* >(object);
  (void)_this;
}
void MotorCmd_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorCmd_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorCmd_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.MotorCmd_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tau_) -
      reinterpret_cast<char*>(&kp_)) + sizeof(tau_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorCmd_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double Kp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          kp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Kd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          kd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tau = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          tau_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorCmd_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.MotorCmd_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Kp = 1;
  if (!(this->_internal_kp() <= 0 && this->_internal_kp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_kp(), target);
  }

  // double Kd = 2;
  if (!(this->_internal_kd() <= 0 && this->_internal_kd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_kd(), target);
  }

  // double pos = 3;
  if (!(this->_internal_pos() <= 0 && this->_internal_pos() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pos(), target);
  }

  // double vel = 4;
  if (!(this->_internal_vel() <= 0 && this->_internal_vel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_vel(), target);
  }

  // double tau = 5;
  if (!(this->_internal_tau() <= 0 && this->_internal_tau() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_tau(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.MotorCmd_msg)
  return target;
}

size_t MotorCmd_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.MotorCmd_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Kp = 1;
  if (!(this->_internal_kp() <= 0 && this->_internal_kp() >= 0)) {
    total_size += 1 + 8;
  }

  // double Kd = 2;
  if (!(this->_internal_kd() <= 0 && this->_internal_kd() >= 0)) {
    total_size += 1 + 8;
  }

  // double pos = 3;
  if (!(this->_internal_pos() <= 0 && this->_internal_pos() >= 0)) {
    total_size += 1 + 8;
  }

  // double vel = 4;
  if (!(this->_internal_vel() <= 0 && this->_internal_vel() >= 0)) {
    total_size += 1 + 8;
  }

  // double tau = 5;
  if (!(this->_internal_tau() <= 0 && this->_internal_tau() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorCmd_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorCmd_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorCmd_msg::GetClassData() const { return &_class_data_; }

void MotorCmd_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MotorCmd_msg *>(to)->MergeFrom(
      static_cast<const MotorCmd_msg &>(from));
}


void MotorCmd_msg::MergeFrom(const MotorCmd_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.MotorCmd_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_kp() <= 0 && from._internal_kp() >= 0)) {
    _internal_set_kp(from._internal_kp());
  }
  if (!(from._internal_kd() <= 0 && from._internal_kd() >= 0)) {
    _internal_set_kd(from._internal_kd());
  }
  if (!(from._internal_pos() <= 0 && from._internal_pos() >= 0)) {
    _internal_set_pos(from._internal_pos());
  }
  if (!(from._internal_vel() <= 0 && from._internal_vel() >= 0)) {
    _internal_set_vel(from._internal_vel());
  }
  if (!(from._internal_tau() <= 0 && from._internal_tau() >= 0)) {
    _internal_set_tau(from._internal_tau());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorCmd_msg::CopyFrom(const MotorCmd_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.MotorCmd_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorCmd_msg::IsInitialized() const {
  return true;
}

void MotorCmd_msg::InternalSwap(MotorCmd_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorCmd_msg, tau_)
      + sizeof(MotorCmd_msg::tau_)
      - PROTOBUF_FIELD_OFFSET(MotorCmd_msg, kp_)>(
          reinterpret_cast<char*>(&kp_),
          reinterpret_cast<char*>(&other->kp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorCmd_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class MotorReadings_msg::_Internal {
 public:
  static const ::messaging::Motor_msg& torques(const MotorReadings_msg* msg);
  static const ::messaging::Motor_msg& positions(const MotorReadings_msg* msg);
  static const ::messaging::Motor_msg& velocities(const MotorReadings_msg* msg);
};

const ::messaging::Motor_msg&
MotorReadings_msg::_Internal::torques(const MotorReadings_msg* msg) {
  return *msg->torques_;
}
const ::messaging::Motor_msg&
MotorReadings_msg::_Internal::positions(const MotorReadings_msg* msg) {
  return *msg->positions_;
}
const ::messaging::Motor_msg&
MotorReadings_msg::_Internal::velocities(const MotorReadings_msg* msg) {
  return *msg->velocities_;
}
MotorReadings_msg::MotorReadings_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.MotorReadings_msg)
}
MotorReadings_msg::MotorReadings_msg(const MotorReadings_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_torques()) {
    torques_ = new ::messaging::Motor_msg(*from.torques_);
  } else {
    torques_ = nullptr;
  }
  if (from._internal_has_positions()) {
    positions_ = new ::messaging::Motor_msg(*from.positions_);
  } else {
    positions_ = nullptr;
  }
  if (from._internal_has_velocities()) {
    velocities_ = new ::messaging::Motor_msg(*from.velocities_);
  } else {
    velocities_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:messaging.MotorReadings_msg)
}

inline void MotorReadings_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&torques_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&torques_)) + sizeof(time_));
}

MotorReadings_msg::~MotorReadings_msg() {
  // @@protoc_insertion_point(destructor:messaging.MotorReadings_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MotorReadings_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete torques_;
  if (this != internal_default_instance()) delete positions_;
  if (this != internal_default_instance()) delete velocities_;
}

void MotorReadings_msg::ArenaDtor(void* object) {
  MotorReadings_msg* _this = reinterpret_cast< MotorReadings_msg* >(object);
  (void)_this;
}
void MotorReadings_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotorReadings_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotorReadings_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.MotorReadings_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && torques_ != nullptr) {
    delete torques_;
  }
  torques_ = nullptr;
  if (GetArenaForAllocation() == nullptr && positions_ != nullptr) {
    delete positions_;
  }
  positions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocities_ != nullptr) {
    delete velocities_;
  }
  velocities_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotorReadings_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messaging.Motor_msg torques = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_torques(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Motor_msg positions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_positions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Motor_msg velocities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorReadings_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.MotorReadings_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .messaging.Motor_msg torques = 1;
  if (this->_internal_has_torques()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::torques(this), target, stream);
  }

  // .messaging.Motor_msg positions = 2;
  if (this->_internal_has_positions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::positions(this), target, stream);
  }

  // .messaging.Motor_msg velocities = 3;
  if (this->_internal_has_velocities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocities(this), target, stream);
  }

  // double time = 5;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.MotorReadings_msg)
  return target;
}

size_t MotorReadings_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.MotorReadings_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .messaging.Motor_msg torques = 1;
  if (this->_internal_has_torques()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torques_);
  }

  // .messaging.Motor_msg positions = 2;
  if (this->_internal_has_positions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positions_);
  }

  // .messaging.Motor_msg velocities = 3;
  if (this->_internal_has_velocities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocities_);
  }

  // double time = 5;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotorReadings_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotorReadings_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotorReadings_msg::GetClassData() const { return &_class_data_; }

void MotorReadings_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MotorReadings_msg *>(to)->MergeFrom(
      static_cast<const MotorReadings_msg &>(from));
}


void MotorReadings_msg::MergeFrom(const MotorReadings_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.MotorReadings_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_torques()) {
    _internal_mutable_torques()->::messaging::Motor_msg::MergeFrom(from._internal_torques());
  }
  if (from._internal_has_positions()) {
    _internal_mutable_positions()->::messaging::Motor_msg::MergeFrom(from._internal_positions());
  }
  if (from._internal_has_velocities()) {
    _internal_mutable_velocities()->::messaging::Motor_msg::MergeFrom(from._internal_velocities());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotorReadings_msg::CopyFrom(const MotorReadings_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.MotorReadings_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorReadings_msg::IsInitialized() const {
  return true;
}

void MotorReadings_msg::InternalSwap(MotorReadings_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotorReadings_msg, time_)
      + sizeof(MotorReadings_msg::time_)
      - PROTOBUF_FIELD_OFFSET(MotorReadings_msg, torques_)>(
          reinterpret_cast<char*>(&torques_),
          reinterpret_cast<char*>(&other->torques_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorReadings_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class Motor_msg::_Internal {
 public:
};

Motor_msg::Motor_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.Motor_msg)
}
Motor_msg::Motor_msg(const Motor_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fr_hip_, &from.fr_hip_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&fr_hip_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:messaging.Motor_msg)
}

inline void Motor_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fr_hip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&fr_hip_)) + sizeof(time_));
}

Motor_msg::~Motor_msg() {
  // @@protoc_insertion_point(destructor:messaging.Motor_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Motor_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Motor_msg::ArenaDtor(void* object) {
  Motor_msg* _this = reinterpret_cast< Motor_msg* >(object);
  (void)_this;
}
void Motor_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Motor_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Motor_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.Motor_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fr_hip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&fr_hip_)) + sizeof(time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motor_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double FR_Hip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          fr_hip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FR_Thigh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          fr_thigh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FR_Calf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          fr_calf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FL_Hip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fl_hip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FL_Thigh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          fl_thigh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double FL_Calf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          fl_calf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RR_Hip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          rr_hip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RR_Thigh = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          rr_thigh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RR_Calf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          rr_calf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RL_Hip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          rl_hip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RL_Thigh = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          rl_thigh_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RL_Calf = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          rl_calf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Motor_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.Motor_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double FR_Hip = 1;
  if (!(this->_internal_fr_hip() <= 0 && this->_internal_fr_hip() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_fr_hip(), target);
  }

  // double FR_Thigh = 2;
  if (!(this->_internal_fr_thigh() <= 0 && this->_internal_fr_thigh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_fr_thigh(), target);
  }

  // double FR_Calf = 3;
  if (!(this->_internal_fr_calf() <= 0 && this->_internal_fr_calf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_fr_calf(), target);
  }

  // double FL_Hip = 4;
  if (!(this->_internal_fl_hip() <= 0 && this->_internal_fl_hip() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fl_hip(), target);
  }

  // double FL_Thigh = 5;
  if (!(this->_internal_fl_thigh() <= 0 && this->_internal_fl_thigh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_fl_thigh(), target);
  }

  // double FL_Calf = 6;
  if (!(this->_internal_fl_calf() <= 0 && this->_internal_fl_calf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_fl_calf(), target);
  }

  // double RR_Hip = 7;
  if (!(this->_internal_rr_hip() <= 0 && this->_internal_rr_hip() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_rr_hip(), target);
  }

  // double RR_Thigh = 8;
  if (!(this->_internal_rr_thigh() <= 0 && this->_internal_rr_thigh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_rr_thigh(), target);
  }

  // double RR_Calf = 9;
  if (!(this->_internal_rr_calf() <= 0 && this->_internal_rr_calf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_rr_calf(), target);
  }

  // double RL_Hip = 10;
  if (!(this->_internal_rl_hip() <= 0 && this->_internal_rl_hip() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_rl_hip(), target);
  }

  // double RL_Thigh = 11;
  if (!(this->_internal_rl_thigh() <= 0 && this->_internal_rl_thigh() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_rl_thigh(), target);
  }

  // double RL_Calf = 12;
  if (!(this->_internal_rl_calf() <= 0 && this->_internal_rl_calf() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_rl_calf(), target);
  }

  // double time = 13;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.Motor_msg)
  return target;
}

size_t Motor_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.Motor_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double FR_Hip = 1;
  if (!(this->_internal_fr_hip() <= 0 && this->_internal_fr_hip() >= 0)) {
    total_size += 1 + 8;
  }

  // double FR_Thigh = 2;
  if (!(this->_internal_fr_thigh() <= 0 && this->_internal_fr_thigh() >= 0)) {
    total_size += 1 + 8;
  }

  // double FR_Calf = 3;
  if (!(this->_internal_fr_calf() <= 0 && this->_internal_fr_calf() >= 0)) {
    total_size += 1 + 8;
  }

  // double FL_Hip = 4;
  if (!(this->_internal_fl_hip() <= 0 && this->_internal_fl_hip() >= 0)) {
    total_size += 1 + 8;
  }

  // double FL_Thigh = 5;
  if (!(this->_internal_fl_thigh() <= 0 && this->_internal_fl_thigh() >= 0)) {
    total_size += 1 + 8;
  }

  // double FL_Calf = 6;
  if (!(this->_internal_fl_calf() <= 0 && this->_internal_fl_calf() >= 0)) {
    total_size += 1 + 8;
  }

  // double RR_Hip = 7;
  if (!(this->_internal_rr_hip() <= 0 && this->_internal_rr_hip() >= 0)) {
    total_size += 1 + 8;
  }

  // double RR_Thigh = 8;
  if (!(this->_internal_rr_thigh() <= 0 && this->_internal_rr_thigh() >= 0)) {
    total_size += 1 + 8;
  }

  // double RR_Calf = 9;
  if (!(this->_internal_rr_calf() <= 0 && this->_internal_rr_calf() >= 0)) {
    total_size += 1 + 8;
  }

  // double RL_Hip = 10;
  if (!(this->_internal_rl_hip() <= 0 && this->_internal_rl_hip() >= 0)) {
    total_size += 1 + 8;
  }

  // double RL_Thigh = 11;
  if (!(this->_internal_rl_thigh() <= 0 && this->_internal_rl_thigh() >= 0)) {
    total_size += 1 + 8;
  }

  // double RL_Calf = 12;
  if (!(this->_internal_rl_calf() <= 0 && this->_internal_rl_calf() >= 0)) {
    total_size += 1 + 8;
  }

  // double time = 13;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motor_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Motor_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motor_msg::GetClassData() const { return &_class_data_; }

void Motor_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Motor_msg *>(to)->MergeFrom(
      static_cast<const Motor_msg &>(from));
}


void Motor_msg::MergeFrom(const Motor_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.Motor_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_fr_hip() <= 0 && from._internal_fr_hip() >= 0)) {
    _internal_set_fr_hip(from._internal_fr_hip());
  }
  if (!(from._internal_fr_thigh() <= 0 && from._internal_fr_thigh() >= 0)) {
    _internal_set_fr_thigh(from._internal_fr_thigh());
  }
  if (!(from._internal_fr_calf() <= 0 && from._internal_fr_calf() >= 0)) {
    _internal_set_fr_calf(from._internal_fr_calf());
  }
  if (!(from._internal_fl_hip() <= 0 && from._internal_fl_hip() >= 0)) {
    _internal_set_fl_hip(from._internal_fl_hip());
  }
  if (!(from._internal_fl_thigh() <= 0 && from._internal_fl_thigh() >= 0)) {
    _internal_set_fl_thigh(from._internal_fl_thigh());
  }
  if (!(from._internal_fl_calf() <= 0 && from._internal_fl_calf() >= 0)) {
    _internal_set_fl_calf(from._internal_fl_calf());
  }
  if (!(from._internal_rr_hip() <= 0 && from._internal_rr_hip() >= 0)) {
    _internal_set_rr_hip(from._internal_rr_hip());
  }
  if (!(from._internal_rr_thigh() <= 0 && from._internal_rr_thigh() >= 0)) {
    _internal_set_rr_thigh(from._internal_rr_thigh());
  }
  if (!(from._internal_rr_calf() <= 0 && from._internal_rr_calf() >= 0)) {
    _internal_set_rr_calf(from._internal_rr_calf());
  }
  if (!(from._internal_rl_hip() <= 0 && from._internal_rl_hip() >= 0)) {
    _internal_set_rl_hip(from._internal_rl_hip());
  }
  if (!(from._internal_rl_thigh() <= 0 && from._internal_rl_thigh() >= 0)) {
    _internal_set_rl_thigh(from._internal_rl_thigh());
  }
  if (!(from._internal_rl_calf() <= 0 && from._internal_rl_calf() >= 0)) {
    _internal_set_rl_calf(from._internal_rl_calf());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motor_msg::CopyFrom(const Motor_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.Motor_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motor_msg::IsInitialized() const {
  return true;
}

void Motor_msg::InternalSwap(Motor_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor_msg, time_)
      + sizeof(Motor_msg::time_)
      - PROTOBUF_FIELD_OFFSET(Motor_msg, fr_hip_)>(
          reinterpret_cast<char*>(&fr_hip_),
          reinterpret_cast<char*>(&other->fr_hip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Motor_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class EKF_msg::_Internal {
 public:
  static const ::messaging::Vector3_msg& position(const EKF_msg* msg);
  static const ::messaging::Quaternion_msg& quaternion(const EKF_msg* msg);
  static const ::messaging::Vector3_msg& velocity(const EKF_msg* msg);
  static const ::messaging::Vector3_msg& acceleration_bias(const EKF_msg* msg);
  static const ::messaging::Vector3_msg& angular_velocity_bias(const EKF_msg* msg);
  static const ::messaging::Vector3_msg& angular_velocity(const EKF_msg* msg);
};

const ::messaging::Vector3_msg&
EKF_msg::_Internal::position(const EKF_msg* msg) {
  return *msg->position_;
}
const ::messaging::Quaternion_msg&
EKF_msg::_Internal::quaternion(const EKF_msg* msg) {
  return *msg->quaternion_;
}
const ::messaging::Vector3_msg&
EKF_msg::_Internal::velocity(const EKF_msg* msg) {
  return *msg->velocity_;
}
const ::messaging::Vector3_msg&
EKF_msg::_Internal::acceleration_bias(const EKF_msg* msg) {
  return *msg->acceleration_bias_;
}
const ::messaging::Vector3_msg&
EKF_msg::_Internal::angular_velocity_bias(const EKF_msg* msg) {
  return *msg->angular_velocity_bias_;
}
const ::messaging::Vector3_msg&
EKF_msg::_Internal::angular_velocity(const EKF_msg* msg) {
  return *msg->angular_velocity_;
}
EKF_msg::EKF_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.EKF_msg)
}
EKF_msg::EKF_msg(const EKF_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::messaging::Vector3_msg(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_quaternion()) {
    quaternion_ = new ::messaging::Quaternion_msg(*from.quaternion_);
  } else {
    quaternion_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::messaging::Vector3_msg(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration_bias()) {
    acceleration_bias_ = new ::messaging::Vector3_msg(*from.acceleration_bias_);
  } else {
    acceleration_bias_ = nullptr;
  }
  if (from._internal_has_angular_velocity_bias()) {
    angular_velocity_bias_ = new ::messaging::Vector3_msg(*from.angular_velocity_bias_);
  } else {
    angular_velocity_bias_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::messaging::Vector3_msg(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:messaging.EKF_msg)
}

inline void EKF_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&position_)) + sizeof(time_));
}

EKF_msg::~EKF_msg() {
  // @@protoc_insertion_point(destructor:messaging.EKF_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EKF_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete quaternion_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_bias_;
  if (this != internal_default_instance()) delete angular_velocity_bias_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void EKF_msg::ArenaDtor(void* object) {
  EKF_msg* _this = reinterpret_cast< EKF_msg* >(object);
  (void)_this;
}
void EKF_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EKF_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EKF_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.EKF_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acceleration_bias_ != nullptr) {
    delete acceleration_bias_;
  }
  acceleration_bias_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_bias_ != nullptr) {
    delete angular_velocity_bias_;
  }
  angular_velocity_bias_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EKF_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messaging.Vector3_msg position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Quaternion_msg quaternion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Vector3_msg velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Vector3_msg acceleration_bias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Vector3_msg angular_velocity_bias = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_bias(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Vector3_msg angular_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EKF_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.EKF_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .messaging.Vector3_msg position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .messaging.Quaternion_msg quaternion = 2;
  if (this->_internal_has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quaternion(this), target, stream);
  }

  // .messaging.Vector3_msg velocity = 3;
  if (this->_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // .messaging.Vector3_msg acceleration_bias = 4;
  if (this->_internal_has_acceleration_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceleration_bias(this), target, stream);
  }

  // .messaging.Vector3_msg angular_velocity_bias = 5;
  if (this->_internal_has_angular_velocity_bias()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::angular_velocity_bias(this), target, stream);
  }

  // .messaging.Vector3_msg angular_velocity = 6;
  if (this->_internal_has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::angular_velocity(this), target, stream);
  }

  // double time = 7;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.EKF_msg)
  return target;
}

size_t EKF_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.EKF_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .messaging.Vector3_msg position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .messaging.Quaternion_msg quaternion = 2;
  if (this->_internal_has_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quaternion_);
  }

  // .messaging.Vector3_msg velocity = 3;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .messaging.Vector3_msg acceleration_bias = 4;
  if (this->_internal_has_acceleration_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_bias_);
  }

  // .messaging.Vector3_msg angular_velocity_bias = 5;
  if (this->_internal_has_angular_velocity_bias()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_bias_);
  }

  // .messaging.Vector3_msg angular_velocity = 6;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // double time = 7;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EKF_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EKF_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EKF_msg::GetClassData() const { return &_class_data_; }

void EKF_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EKF_msg *>(to)->MergeFrom(
      static_cast<const EKF_msg &>(from));
}


void EKF_msg::MergeFrom(const EKF_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.EKF_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::messaging::Vector3_msg::MergeFrom(from._internal_position());
  }
  if (from._internal_has_quaternion()) {
    _internal_mutable_quaternion()->::messaging::Quaternion_msg::MergeFrom(from._internal_quaternion());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::messaging::Vector3_msg::MergeFrom(from._internal_velocity());
  }
  if (from._internal_has_acceleration_bias()) {
    _internal_mutable_acceleration_bias()->::messaging::Vector3_msg::MergeFrom(from._internal_acceleration_bias());
  }
  if (from._internal_has_angular_velocity_bias()) {
    _internal_mutable_angular_velocity_bias()->::messaging::Vector3_msg::MergeFrom(from._internal_angular_velocity_bias());
  }
  if (from._internal_has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::messaging::Vector3_msg::MergeFrom(from._internal_angular_velocity());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EKF_msg::CopyFrom(const EKF_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.EKF_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EKF_msg::IsInitialized() const {
  return true;
}

void EKF_msg::InternalSwap(EKF_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EKF_msg, time_)
      + sizeof(EKF_msg::time_)
      - PROTOBUF_FIELD_OFFSET(EKF_msg, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EKF_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class IMU_msg::_Internal {
 public:
  static const ::messaging::Vector3_msg& acceleration(const IMU_msg* msg);
  static const ::messaging::Vector3_msg& gyroscope(const IMU_msg* msg);
};

const ::messaging::Vector3_msg&
IMU_msg::_Internal::acceleration(const IMU_msg* msg) {
  return *msg->acceleration_;
}
const ::messaging::Vector3_msg&
IMU_msg::_Internal::gyroscope(const IMU_msg* msg) {
  return *msg->gyroscope_;
}
IMU_msg::IMU_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.IMU_msg)
}
IMU_msg::IMU_msg(const IMU_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::messaging::Vector3_msg(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_gyroscope()) {
    gyroscope_ = new ::messaging::Vector3_msg(*from.gyroscope_);
  } else {
    gyroscope_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:messaging.IMU_msg)
}

inline void IMU_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acceleration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&acceleration_)) + sizeof(time_));
}

IMU_msg::~IMU_msg() {
  // @@protoc_insertion_point(destructor:messaging.IMU_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMU_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete gyroscope_;
}

void IMU_msg::ArenaDtor(void* object) {
  IMU_msg* _this = reinterpret_cast< IMU_msg* >(object);
  (void)_this;
}
void IMU_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMU_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.IMU_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gyroscope_ != nullptr) {
    delete gyroscope_;
  }
  gyroscope_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messaging.Vector3_msg acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Vector3_msg gyroscope = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyroscope(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMU_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.IMU_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .messaging.Vector3_msg acceleration = 1;
  if (this->_internal_has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acceleration(this), target, stream);
  }

  // .messaging.Vector3_msg gyroscope = 2;
  if (this->_internal_has_gyroscope()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gyroscope(this), target, stream);
  }

  // double time = 3;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.IMU_msg)
  return target;
}

size_t IMU_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.IMU_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .messaging.Vector3_msg acceleration = 1;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .messaging.Vector3_msg gyroscope = 2;
  if (this->_internal_has_gyroscope()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gyroscope_);
  }

  // double time = 3;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMU_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMU_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMU_msg::GetClassData() const { return &_class_data_; }

void IMU_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IMU_msg *>(to)->MergeFrom(
      static_cast<const IMU_msg &>(from));
}


void IMU_msg::MergeFrom(const IMU_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.IMU_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_acceleration()) {
    _internal_mutable_acceleration()->::messaging::Vector3_msg::MergeFrom(from._internal_acceleration());
  }
  if (from._internal_has_gyroscope()) {
    _internal_mutable_gyroscope()->::messaging::Vector3_msg::MergeFrom(from._internal_gyroscope());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMU_msg::CopyFrom(const IMU_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.IMU_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_msg::IsInitialized() const {
  return true;
}

void IMU_msg::InternalSwap(IMU_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMU_msg, time_)
      + sizeof(IMU_msg::time_)
      - PROTOBUF_FIELD_OFFSET(IMU_msg, acceleration_)>(
          reinterpret_cast<char*>(&acceleration_),
          reinterpret_cast<char*>(&other->acceleration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class Vicon_msg::_Internal {
 public:
  static const ::messaging::Vector3_msg& position(const Vicon_msg* msg);
  static const ::messaging::Quaternion_msg& quaternion(const Vicon_msg* msg);
};

const ::messaging::Vector3_msg&
Vicon_msg::_Internal::position(const Vicon_msg* msg) {
  return *msg->position_;
}
const ::messaging::Quaternion_msg&
Vicon_msg::_Internal::quaternion(const Vicon_msg* msg) {
  return *msg->quaternion_;
}
Vicon_msg::Vicon_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.Vicon_msg)
}
Vicon_msg::Vicon_msg(const Vicon_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::messaging::Vector3_msg(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_quaternion()) {
    quaternion_ = new ::messaging::Quaternion_msg(*from.quaternion_);
  } else {
    quaternion_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:messaging.Vicon_msg)
}

inline void Vicon_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&position_)) + sizeof(time_));
}

Vicon_msg::~Vicon_msg() {
  // @@protoc_insertion_point(destructor:messaging.Vicon_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vicon_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete quaternion_;
}

void Vicon_msg::ArenaDtor(void* object) {
  Vicon_msg* _this = reinterpret_cast< Vicon_msg* >(object);
  (void)_this;
}
void Vicon_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vicon_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vicon_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.Vicon_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vicon_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messaging.Vector3_msg position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .messaging.Quaternion_msg quaternion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vicon_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.Vicon_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .messaging.Vector3_msg position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .messaging.Quaternion_msg quaternion = 2;
  if (this->_internal_has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quaternion(this), target, stream);
  }

  // double time = 3;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.Vicon_msg)
  return target;
}

size_t Vicon_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.Vicon_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .messaging.Vector3_msg position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .messaging.Quaternion_msg quaternion = 2;
  if (this->_internal_has_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quaternion_);
  }

  // double time = 3;
  if (!(this->_internal_time() <= 0 && this->_internal_time() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vicon_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vicon_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vicon_msg::GetClassData() const { return &_class_data_; }

void Vicon_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vicon_msg *>(to)->MergeFrom(
      static_cast<const Vicon_msg &>(from));
}


void Vicon_msg::MergeFrom(const Vicon_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.Vicon_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::messaging::Vector3_msg::MergeFrom(from._internal_position());
  }
  if (from._internal_has_quaternion()) {
    _internal_mutable_quaternion()->::messaging::Quaternion_msg::MergeFrom(from._internal_quaternion());
  }
  if (!(from._internal_time() <= 0 && from._internal_time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vicon_msg::CopyFrom(const Vicon_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.Vicon_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vicon_msg::IsInitialized() const {
  return true;
}

void Vicon_msg::InternalSwap(Vicon_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vicon_msg, time_)
      + sizeof(Vicon_msg::time_)
      - PROTOBUF_FIELD_OFFSET(Vicon_msg, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vicon_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// ===================================================================

class Vector3_msg::_Internal {
 public:
};

Vector3_msg::Vector3_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.Vector3_msg)
}
Vector3_msg::Vector3_msg(const Vector3_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:messaging.Vector3_msg)
}

inline void Vector3_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3_msg::~Vector3_msg() {
  // @@protoc_insertion_point(destructor:messaging.Vector3_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vector3_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3_msg::ArenaDtor(void* object) {
  Vector3_msg* _this = reinterpret_cast< Vector3_msg* >(object);
  (void)_this;
}
void Vector3_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.Vector3_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.Vector3_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.Vector3_msg)
  return target;
}

size_t Vector3_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.Vector3_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3_msg::GetClassData() const { return &_class_data_; }

void Vector3_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Vector3_msg *>(to)->MergeFrom(
      static_cast<const Vector3_msg &>(from));
}


void Vector3_msg::MergeFrom(const Vector3_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.Vector3_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3_msg::CopyFrom(const Vector3_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.Vector3_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3_msg::IsInitialized() const {
  return true;
}

void Vector3_msg::InternalSwap(Vector3_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3_msg, z_)
      + sizeof(Vector3_msg::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3_msg, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[7]);
}

// ===================================================================

class Quaternion_msg::_Internal {
 public:
};

Quaternion_msg::Quaternion_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.Quaternion_msg)
}
Quaternion_msg::Quaternion_msg(const Quaternion_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:messaging.Quaternion_msg)
}

inline void Quaternion_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternion_msg::~Quaternion_msg() {
  // @@protoc_insertion_point(destructor:messaging.Quaternion_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Quaternion_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion_msg::ArenaDtor(void* object) {
  Quaternion_msg* _this = reinterpret_cast< Quaternion_msg* >(object);
  (void)_this;
}
void Quaternion_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaternion_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.Quaternion_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion_msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.Quaternion_msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // double x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.Quaternion_msg)
  return target;
}

size_t Quaternion_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.Quaternion_msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 4;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Quaternion_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion_msg::GetClassData() const { return &_class_data_; }

void Quaternion_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Quaternion_msg *>(to)->MergeFrom(
      static_cast<const Quaternion_msg &>(from));
}


void Quaternion_msg::MergeFrom(const Quaternion_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.Quaternion_msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_w() <= 0 && from._internal_w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion_msg::CopyFrom(const Quaternion_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.Quaternion_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion_msg::IsInitialized() const {
  return true;
}

void Quaternion_msg::InternalSwap(Quaternion_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion_msg, z_)
      + sizeof(Quaternion_msg::z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion_msg, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::messaging::MotorCmds_msg* Arena::CreateMaybeMessage< ::messaging::MotorCmds_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::MotorCmds_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::MotorCmd_msg* Arena::CreateMaybeMessage< ::messaging::MotorCmd_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::MotorCmd_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::MotorReadings_msg* Arena::CreateMaybeMessage< ::messaging::MotorReadings_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::MotorReadings_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::Motor_msg* Arena::CreateMaybeMessage< ::messaging::Motor_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::Motor_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::EKF_msg* Arena::CreateMaybeMessage< ::messaging::EKF_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::EKF_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::IMU_msg* Arena::CreateMaybeMessage< ::messaging::IMU_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::IMU_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::Vicon_msg* Arena::CreateMaybeMessage< ::messaging::Vicon_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::Vicon_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::Vector3_msg* Arena::CreateMaybeMessage< ::messaging::Vector3_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::Vector3_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::messaging::Quaternion_msg* Arena::CreateMaybeMessage< ::messaging::Quaternion_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::Quaternion_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
