// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace messaging {
class EKF_msg;
struct EKF_msgDefaultTypeInternal;
extern EKF_msgDefaultTypeInternal _EKF_msg_default_instance_;
class ErrorMsg;
struct ErrorMsgDefaultTypeInternal;
extern ErrorMsgDefaultTypeInternal _ErrorMsg_default_instance_;
class IMU_msg;
struct IMU_msgDefaultTypeInternal;
extern IMU_msgDefaultTypeInternal _IMU_msg_default_instance_;
class MotorCmd_msg;
struct MotorCmd_msgDefaultTypeInternal;
extern MotorCmd_msgDefaultTypeInternal _MotorCmd_msg_default_instance_;
class MotorCmds_msg;
struct MotorCmds_msgDefaultTypeInternal;
extern MotorCmds_msgDefaultTypeInternal _MotorCmds_msg_default_instance_;
class MotorReadings_msg;
struct MotorReadings_msgDefaultTypeInternal;
extern MotorReadings_msgDefaultTypeInternal _MotorReadings_msg_default_instance_;
class Motor_msg;
struct Motor_msgDefaultTypeInternal;
extern Motor_msgDefaultTypeInternal _Motor_msg_default_instance_;
class Quaternion_msg;
struct Quaternion_msgDefaultTypeInternal;
extern Quaternion_msgDefaultTypeInternal _Quaternion_msg_default_instance_;
class Vector3_msg;
struct Vector3_msgDefaultTypeInternal;
extern Vector3_msgDefaultTypeInternal _Vector3_msg_default_instance_;
class Vicon_msg;
struct Vicon_msgDefaultTypeInternal;
extern Vicon_msgDefaultTypeInternal _Vicon_msg_default_instance_;
}  // namespace messaging
PROTOBUF_NAMESPACE_OPEN
template<> ::messaging::EKF_msg* Arena::CreateMaybeMessage<::messaging::EKF_msg>(Arena*);
template<> ::messaging::ErrorMsg* Arena::CreateMaybeMessage<::messaging::ErrorMsg>(Arena*);
template<> ::messaging::IMU_msg* Arena::CreateMaybeMessage<::messaging::IMU_msg>(Arena*);
template<> ::messaging::MotorCmd_msg* Arena::CreateMaybeMessage<::messaging::MotorCmd_msg>(Arena*);
template<> ::messaging::MotorCmds_msg* Arena::CreateMaybeMessage<::messaging::MotorCmds_msg>(Arena*);
template<> ::messaging::MotorReadings_msg* Arena::CreateMaybeMessage<::messaging::MotorReadings_msg>(Arena*);
template<> ::messaging::Motor_msg* Arena::CreateMaybeMessage<::messaging::Motor_msg>(Arena*);
template<> ::messaging::Quaternion_msg* Arena::CreateMaybeMessage<::messaging::Quaternion_msg>(Arena*);
template<> ::messaging::Vector3_msg* Arena::CreateMaybeMessage<::messaging::Vector3_msg>(Arena*);
template<> ::messaging::Vicon_msg* Arena::CreateMaybeMessage<::messaging::Vicon_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messaging {

// ===================================================================

class ErrorMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.ErrorMsg) */ {
 public:
  inline ErrorMsg() : ErrorMsg(nullptr) {}
  ~ErrorMsg() override;
  explicit constexpr ErrorMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorMsg(const ErrorMsg& from);
  ErrorMsg(ErrorMsg&& from) noexcept
    : ErrorMsg() {
    *this = ::std::move(from);
  }

  inline ErrorMsg& operator=(const ErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorMsg& operator=(ErrorMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorMsg* internal_default_instance() {
    return reinterpret_cast<const ErrorMsg*>(
               &_ErrorMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ErrorMsg& a, ErrorMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorMsg* New() const final {
    return new ErrorMsg();
  }

  ErrorMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ErrorMsg& from);
  void MergeFrom(const ErrorMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.ErrorMsg";
  }
  protected:
  explicit ErrorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kVelFieldNumber = 3,
    kAngularVelFieldNumber = 4,
    kMotorPosFieldNumber = 5,
    kMotorVelFieldNumber = 6,
    kTimeFieldNumber = 7,
  };
  // .messaging.Vector3_msg position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::messaging::Vector3_msg& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_position();
  ::messaging::Vector3_msg* mutable_position();
  void set_allocated_position(::messaging::Vector3_msg* position);
  private:
  const ::messaging::Vector3_msg& _internal_position() const;
  ::messaging::Vector3_msg* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::messaging::Vector3_msg* position);
  ::messaging::Vector3_msg* unsafe_arena_release_position();

  // .messaging.Vector3_msg orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::messaging::Vector3_msg& orientation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_orientation();
  ::messaging::Vector3_msg* mutable_orientation();
  void set_allocated_orientation(::messaging::Vector3_msg* orientation);
  private:
  const ::messaging::Vector3_msg& _internal_orientation() const;
  ::messaging::Vector3_msg* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::messaging::Vector3_msg* orientation);
  ::messaging::Vector3_msg* unsafe_arena_release_orientation();

  // .messaging.Vector3_msg vel = 3;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::messaging::Vector3_msg& vel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_vel();
  ::messaging::Vector3_msg* mutable_vel();
  void set_allocated_vel(::messaging::Vector3_msg* vel);
  private:
  const ::messaging::Vector3_msg& _internal_vel() const;
  ::messaging::Vector3_msg* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::messaging::Vector3_msg* vel);
  ::messaging::Vector3_msg* unsafe_arena_release_vel();

  // .messaging.Vector3_msg angular_vel = 4;
  bool has_angular_vel() const;
  private:
  bool _internal_has_angular_vel() const;
  public:
  void clear_angular_vel();
  const ::messaging::Vector3_msg& angular_vel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_angular_vel();
  ::messaging::Vector3_msg* mutable_angular_vel();
  void set_allocated_angular_vel(::messaging::Vector3_msg* angular_vel);
  private:
  const ::messaging::Vector3_msg& _internal_angular_vel() const;
  ::messaging::Vector3_msg* _internal_mutable_angular_vel();
  public:
  void unsafe_arena_set_allocated_angular_vel(
      ::messaging::Vector3_msg* angular_vel);
  ::messaging::Vector3_msg* unsafe_arena_release_angular_vel();

  // .messaging.Motor_msg motor_pos = 5;
  bool has_motor_pos() const;
  private:
  bool _internal_has_motor_pos() const;
  public:
  void clear_motor_pos();
  const ::messaging::Motor_msg& motor_pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Motor_msg* release_motor_pos();
  ::messaging::Motor_msg* mutable_motor_pos();
  void set_allocated_motor_pos(::messaging::Motor_msg* motor_pos);
  private:
  const ::messaging::Motor_msg& _internal_motor_pos() const;
  ::messaging::Motor_msg* _internal_mutable_motor_pos();
  public:
  void unsafe_arena_set_allocated_motor_pos(
      ::messaging::Motor_msg* motor_pos);
  ::messaging::Motor_msg* unsafe_arena_release_motor_pos();

  // .messaging.Motor_msg motor_vel = 6;
  bool has_motor_vel() const;
  private:
  bool _internal_has_motor_vel() const;
  public:
  void clear_motor_vel();
  const ::messaging::Motor_msg& motor_vel() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Motor_msg* release_motor_vel();
  ::messaging::Motor_msg* mutable_motor_vel();
  void set_allocated_motor_vel(::messaging::Motor_msg* motor_vel);
  private:
  const ::messaging::Motor_msg& _internal_motor_vel() const;
  ::messaging::Motor_msg* _internal_mutable_motor_vel();
  public:
  void unsafe_arena_set_allocated_motor_vel(
      ::messaging::Motor_msg* motor_vel);
  ::messaging::Motor_msg* unsafe_arena_release_motor_vel();

  // double time = 7;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.ErrorMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::messaging::Vector3_msg* position_;
  ::messaging::Vector3_msg* orientation_;
  ::messaging::Vector3_msg* vel_;
  ::messaging::Vector3_msg* angular_vel_;
  ::messaging::Motor_msg* motor_pos_;
  ::messaging::Motor_msg* motor_vel_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MotorCmds_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.MotorCmds_msg) */ {
 public:
  inline MotorCmds_msg() : MotorCmds_msg(nullptr) {}
  ~MotorCmds_msg() override;
  explicit constexpr MotorCmds_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorCmds_msg(const MotorCmds_msg& from);
  MotorCmds_msg(MotorCmds_msg&& from) noexcept
    : MotorCmds_msg() {
    *this = ::std::move(from);
  }

  inline MotorCmds_msg& operator=(const MotorCmds_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorCmds_msg& operator=(MotorCmds_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorCmds_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorCmds_msg* internal_default_instance() {
    return reinterpret_cast<const MotorCmds_msg*>(
               &_MotorCmds_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MotorCmds_msg& a, MotorCmds_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorCmds_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorCmds_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotorCmds_msg* New() const final {
    return new MotorCmds_msg();
  }

  MotorCmds_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotorCmds_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotorCmds_msg& from);
  void MergeFrom(const MotorCmds_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorCmds_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.MotorCmds_msg";
  }
  protected:
  explicit MotorCmds_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFRHipFieldNumber = 1,
    kFRThighFieldNumber = 2,
    kFRCalfFieldNumber = 3,
    kFLHipFieldNumber = 4,
    kFLThighFieldNumber = 5,
    kFLCalfFieldNumber = 6,
    kRRHipFieldNumber = 7,
    kRRThighFieldNumber = 8,
    kRRCalfFieldNumber = 9,
    kRLHipFieldNumber = 10,
    kRLThighFieldNumber = 11,
    kRLCalfFieldNumber = 12,
    kTimeFieldNumber = 13,
  };
  // .messaging.MotorCmd_msg FR_Hip = 1;
  bool has_fr_hip() const;
  private:
  bool _internal_has_fr_hip() const;
  public:
  void clear_fr_hip();
  const ::messaging::MotorCmd_msg& fr_hip() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_fr_hip();
  ::messaging::MotorCmd_msg* mutable_fr_hip();
  void set_allocated_fr_hip(::messaging::MotorCmd_msg* fr_hip);
  private:
  const ::messaging::MotorCmd_msg& _internal_fr_hip() const;
  ::messaging::MotorCmd_msg* _internal_mutable_fr_hip();
  public:
  void unsafe_arena_set_allocated_fr_hip(
      ::messaging::MotorCmd_msg* fr_hip);
  ::messaging::MotorCmd_msg* unsafe_arena_release_fr_hip();

  // .messaging.MotorCmd_msg FR_Thigh = 2;
  bool has_fr_thigh() const;
  private:
  bool _internal_has_fr_thigh() const;
  public:
  void clear_fr_thigh();
  const ::messaging::MotorCmd_msg& fr_thigh() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_fr_thigh();
  ::messaging::MotorCmd_msg* mutable_fr_thigh();
  void set_allocated_fr_thigh(::messaging::MotorCmd_msg* fr_thigh);
  private:
  const ::messaging::MotorCmd_msg& _internal_fr_thigh() const;
  ::messaging::MotorCmd_msg* _internal_mutable_fr_thigh();
  public:
  void unsafe_arena_set_allocated_fr_thigh(
      ::messaging::MotorCmd_msg* fr_thigh);
  ::messaging::MotorCmd_msg* unsafe_arena_release_fr_thigh();

  // .messaging.MotorCmd_msg FR_Calf = 3;
  bool has_fr_calf() const;
  private:
  bool _internal_has_fr_calf() const;
  public:
  void clear_fr_calf();
  const ::messaging::MotorCmd_msg& fr_calf() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_fr_calf();
  ::messaging::MotorCmd_msg* mutable_fr_calf();
  void set_allocated_fr_calf(::messaging::MotorCmd_msg* fr_calf);
  private:
  const ::messaging::MotorCmd_msg& _internal_fr_calf() const;
  ::messaging::MotorCmd_msg* _internal_mutable_fr_calf();
  public:
  void unsafe_arena_set_allocated_fr_calf(
      ::messaging::MotorCmd_msg* fr_calf);
  ::messaging::MotorCmd_msg* unsafe_arena_release_fr_calf();

  // .messaging.MotorCmd_msg FL_Hip = 4;
  bool has_fl_hip() const;
  private:
  bool _internal_has_fl_hip() const;
  public:
  void clear_fl_hip();
  const ::messaging::MotorCmd_msg& fl_hip() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_fl_hip();
  ::messaging::MotorCmd_msg* mutable_fl_hip();
  void set_allocated_fl_hip(::messaging::MotorCmd_msg* fl_hip);
  private:
  const ::messaging::MotorCmd_msg& _internal_fl_hip() const;
  ::messaging::MotorCmd_msg* _internal_mutable_fl_hip();
  public:
  void unsafe_arena_set_allocated_fl_hip(
      ::messaging::MotorCmd_msg* fl_hip);
  ::messaging::MotorCmd_msg* unsafe_arena_release_fl_hip();

  // .messaging.MotorCmd_msg FL_Thigh = 5;
  bool has_fl_thigh() const;
  private:
  bool _internal_has_fl_thigh() const;
  public:
  void clear_fl_thigh();
  const ::messaging::MotorCmd_msg& fl_thigh() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_fl_thigh();
  ::messaging::MotorCmd_msg* mutable_fl_thigh();
  void set_allocated_fl_thigh(::messaging::MotorCmd_msg* fl_thigh);
  private:
  const ::messaging::MotorCmd_msg& _internal_fl_thigh() const;
  ::messaging::MotorCmd_msg* _internal_mutable_fl_thigh();
  public:
  void unsafe_arena_set_allocated_fl_thigh(
      ::messaging::MotorCmd_msg* fl_thigh);
  ::messaging::MotorCmd_msg* unsafe_arena_release_fl_thigh();

  // .messaging.MotorCmd_msg FL_Calf = 6;
  bool has_fl_calf() const;
  private:
  bool _internal_has_fl_calf() const;
  public:
  void clear_fl_calf();
  const ::messaging::MotorCmd_msg& fl_calf() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_fl_calf();
  ::messaging::MotorCmd_msg* mutable_fl_calf();
  void set_allocated_fl_calf(::messaging::MotorCmd_msg* fl_calf);
  private:
  const ::messaging::MotorCmd_msg& _internal_fl_calf() const;
  ::messaging::MotorCmd_msg* _internal_mutable_fl_calf();
  public:
  void unsafe_arena_set_allocated_fl_calf(
      ::messaging::MotorCmd_msg* fl_calf);
  ::messaging::MotorCmd_msg* unsafe_arena_release_fl_calf();

  // .messaging.MotorCmd_msg RR_Hip = 7;
  bool has_rr_hip() const;
  private:
  bool _internal_has_rr_hip() const;
  public:
  void clear_rr_hip();
  const ::messaging::MotorCmd_msg& rr_hip() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_rr_hip();
  ::messaging::MotorCmd_msg* mutable_rr_hip();
  void set_allocated_rr_hip(::messaging::MotorCmd_msg* rr_hip);
  private:
  const ::messaging::MotorCmd_msg& _internal_rr_hip() const;
  ::messaging::MotorCmd_msg* _internal_mutable_rr_hip();
  public:
  void unsafe_arena_set_allocated_rr_hip(
      ::messaging::MotorCmd_msg* rr_hip);
  ::messaging::MotorCmd_msg* unsafe_arena_release_rr_hip();

  // .messaging.MotorCmd_msg RR_Thigh = 8;
  bool has_rr_thigh() const;
  private:
  bool _internal_has_rr_thigh() const;
  public:
  void clear_rr_thigh();
  const ::messaging::MotorCmd_msg& rr_thigh() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_rr_thigh();
  ::messaging::MotorCmd_msg* mutable_rr_thigh();
  void set_allocated_rr_thigh(::messaging::MotorCmd_msg* rr_thigh);
  private:
  const ::messaging::MotorCmd_msg& _internal_rr_thigh() const;
  ::messaging::MotorCmd_msg* _internal_mutable_rr_thigh();
  public:
  void unsafe_arena_set_allocated_rr_thigh(
      ::messaging::MotorCmd_msg* rr_thigh);
  ::messaging::MotorCmd_msg* unsafe_arena_release_rr_thigh();

  // .messaging.MotorCmd_msg RR_Calf = 9;
  bool has_rr_calf() const;
  private:
  bool _internal_has_rr_calf() const;
  public:
  void clear_rr_calf();
  const ::messaging::MotorCmd_msg& rr_calf() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_rr_calf();
  ::messaging::MotorCmd_msg* mutable_rr_calf();
  void set_allocated_rr_calf(::messaging::MotorCmd_msg* rr_calf);
  private:
  const ::messaging::MotorCmd_msg& _internal_rr_calf() const;
  ::messaging::MotorCmd_msg* _internal_mutable_rr_calf();
  public:
  void unsafe_arena_set_allocated_rr_calf(
      ::messaging::MotorCmd_msg* rr_calf);
  ::messaging::MotorCmd_msg* unsafe_arena_release_rr_calf();

  // .messaging.MotorCmd_msg RL_Hip = 10;
  bool has_rl_hip() const;
  private:
  bool _internal_has_rl_hip() const;
  public:
  void clear_rl_hip();
  const ::messaging::MotorCmd_msg& rl_hip() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_rl_hip();
  ::messaging::MotorCmd_msg* mutable_rl_hip();
  void set_allocated_rl_hip(::messaging::MotorCmd_msg* rl_hip);
  private:
  const ::messaging::MotorCmd_msg& _internal_rl_hip() const;
  ::messaging::MotorCmd_msg* _internal_mutable_rl_hip();
  public:
  void unsafe_arena_set_allocated_rl_hip(
      ::messaging::MotorCmd_msg* rl_hip);
  ::messaging::MotorCmd_msg* unsafe_arena_release_rl_hip();

  // .messaging.MotorCmd_msg RL_Thigh = 11;
  bool has_rl_thigh() const;
  private:
  bool _internal_has_rl_thigh() const;
  public:
  void clear_rl_thigh();
  const ::messaging::MotorCmd_msg& rl_thigh() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_rl_thigh();
  ::messaging::MotorCmd_msg* mutable_rl_thigh();
  void set_allocated_rl_thigh(::messaging::MotorCmd_msg* rl_thigh);
  private:
  const ::messaging::MotorCmd_msg& _internal_rl_thigh() const;
  ::messaging::MotorCmd_msg* _internal_mutable_rl_thigh();
  public:
  void unsafe_arena_set_allocated_rl_thigh(
      ::messaging::MotorCmd_msg* rl_thigh);
  ::messaging::MotorCmd_msg* unsafe_arena_release_rl_thigh();

  // .messaging.MotorCmd_msg RL_Calf = 12;
  bool has_rl_calf() const;
  private:
  bool _internal_has_rl_calf() const;
  public:
  void clear_rl_calf();
  const ::messaging::MotorCmd_msg& rl_calf() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::MotorCmd_msg* release_rl_calf();
  ::messaging::MotorCmd_msg* mutable_rl_calf();
  void set_allocated_rl_calf(::messaging::MotorCmd_msg* rl_calf);
  private:
  const ::messaging::MotorCmd_msg& _internal_rl_calf() const;
  ::messaging::MotorCmd_msg* _internal_mutable_rl_calf();
  public:
  void unsafe_arena_set_allocated_rl_calf(
      ::messaging::MotorCmd_msg* rl_calf);
  ::messaging::MotorCmd_msg* unsafe_arena_release_rl_calf();

  // double time = 13;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.MotorCmds_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::messaging::MotorCmd_msg* fr_hip_;
  ::messaging::MotorCmd_msg* fr_thigh_;
  ::messaging::MotorCmd_msg* fr_calf_;
  ::messaging::MotorCmd_msg* fl_hip_;
  ::messaging::MotorCmd_msg* fl_thigh_;
  ::messaging::MotorCmd_msg* fl_calf_;
  ::messaging::MotorCmd_msg* rr_hip_;
  ::messaging::MotorCmd_msg* rr_thigh_;
  ::messaging::MotorCmd_msg* rr_calf_;
  ::messaging::MotorCmd_msg* rl_hip_;
  ::messaging::MotorCmd_msg* rl_thigh_;
  ::messaging::MotorCmd_msg* rl_calf_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MotorCmd_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.MotorCmd_msg) */ {
 public:
  inline MotorCmd_msg() : MotorCmd_msg(nullptr) {}
  ~MotorCmd_msg() override;
  explicit constexpr MotorCmd_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorCmd_msg(const MotorCmd_msg& from);
  MotorCmd_msg(MotorCmd_msg&& from) noexcept
    : MotorCmd_msg() {
    *this = ::std::move(from);
  }

  inline MotorCmd_msg& operator=(const MotorCmd_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorCmd_msg& operator=(MotorCmd_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorCmd_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorCmd_msg* internal_default_instance() {
    return reinterpret_cast<const MotorCmd_msg*>(
               &_MotorCmd_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MotorCmd_msg& a, MotorCmd_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorCmd_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorCmd_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotorCmd_msg* New() const final {
    return new MotorCmd_msg();
  }

  MotorCmd_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotorCmd_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotorCmd_msg& from);
  void MergeFrom(const MotorCmd_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorCmd_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.MotorCmd_msg";
  }
  protected:
  explicit MotorCmd_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKpFieldNumber = 1,
    kKdFieldNumber = 2,
    kPosFieldNumber = 3,
    kVelFieldNumber = 4,
    kTauFieldNumber = 5,
  };
  // double Kp = 1;
  void clear_kp();
  double kp() const;
  void set_kp(double value);
  private:
  double _internal_kp() const;
  void _internal_set_kp(double value);
  public:

  // double Kd = 2;
  void clear_kd();
  double kd() const;
  void set_kd(double value);
  private:
  double _internal_kd() const;
  void _internal_set_kd(double value);
  public:

  // double pos = 3;
  void clear_pos();
  double pos() const;
  void set_pos(double value);
  private:
  double _internal_pos() const;
  void _internal_set_pos(double value);
  public:

  // double vel = 4;
  void clear_vel();
  double vel() const;
  void set_vel(double value);
  private:
  double _internal_vel() const;
  void _internal_set_vel(double value);
  public:

  // double tau = 5;
  void clear_tau();
  double tau() const;
  void set_tau(double value);
  private:
  double _internal_tau() const;
  void _internal_set_tau(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.MotorCmd_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double kp_;
  double kd_;
  double pos_;
  double vel_;
  double tau_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MotorReadings_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.MotorReadings_msg) */ {
 public:
  inline MotorReadings_msg() : MotorReadings_msg(nullptr) {}
  ~MotorReadings_msg() override;
  explicit constexpr MotorReadings_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MotorReadings_msg(const MotorReadings_msg& from);
  MotorReadings_msg(MotorReadings_msg&& from) noexcept
    : MotorReadings_msg() {
    *this = ::std::move(from);
  }

  inline MotorReadings_msg& operator=(const MotorReadings_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotorReadings_msg& operator=(MotorReadings_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MotorReadings_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MotorReadings_msg* internal_default_instance() {
    return reinterpret_cast<const MotorReadings_msg*>(
               &_MotorReadings_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MotorReadings_msg& a, MotorReadings_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(MotorReadings_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotorReadings_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotorReadings_msg* New() const final {
    return new MotorReadings_msg();
  }

  MotorReadings_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotorReadings_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotorReadings_msg& from);
  void MergeFrom(const MotorReadings_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotorReadings_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.MotorReadings_msg";
  }
  protected:
  explicit MotorReadings_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorquesFieldNumber = 1,
    kPositionsFieldNumber = 2,
    kVelocitiesFieldNumber = 3,
    kTimeFieldNumber = 5,
  };
  // .messaging.Motor_msg torques = 1;
  bool has_torques() const;
  private:
  bool _internal_has_torques() const;
  public:
  void clear_torques();
  const ::messaging::Motor_msg& torques() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Motor_msg* release_torques();
  ::messaging::Motor_msg* mutable_torques();
  void set_allocated_torques(::messaging::Motor_msg* torques);
  private:
  const ::messaging::Motor_msg& _internal_torques() const;
  ::messaging::Motor_msg* _internal_mutable_torques();
  public:
  void unsafe_arena_set_allocated_torques(
      ::messaging::Motor_msg* torques);
  ::messaging::Motor_msg* unsafe_arena_release_torques();

  // .messaging.Motor_msg positions = 2;
  bool has_positions() const;
  private:
  bool _internal_has_positions() const;
  public:
  void clear_positions();
  const ::messaging::Motor_msg& positions() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Motor_msg* release_positions();
  ::messaging::Motor_msg* mutable_positions();
  void set_allocated_positions(::messaging::Motor_msg* positions);
  private:
  const ::messaging::Motor_msg& _internal_positions() const;
  ::messaging::Motor_msg* _internal_mutable_positions();
  public:
  void unsafe_arena_set_allocated_positions(
      ::messaging::Motor_msg* positions);
  ::messaging::Motor_msg* unsafe_arena_release_positions();

  // .messaging.Motor_msg velocities = 3;
  bool has_velocities() const;
  private:
  bool _internal_has_velocities() const;
  public:
  void clear_velocities();
  const ::messaging::Motor_msg& velocities() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Motor_msg* release_velocities();
  ::messaging::Motor_msg* mutable_velocities();
  void set_allocated_velocities(::messaging::Motor_msg* velocities);
  private:
  const ::messaging::Motor_msg& _internal_velocities() const;
  ::messaging::Motor_msg* _internal_mutable_velocities();
  public:
  void unsafe_arena_set_allocated_velocities(
      ::messaging::Motor_msg* velocities);
  ::messaging::Motor_msg* unsafe_arena_release_velocities();

  // double time = 5;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.MotorReadings_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::messaging::Motor_msg* torques_;
  ::messaging::Motor_msg* positions_;
  ::messaging::Motor_msg* velocities_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Motor_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.Motor_msg) */ {
 public:
  inline Motor_msg() : Motor_msg(nullptr) {}
  ~Motor_msg() override;
  explicit constexpr Motor_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motor_msg(const Motor_msg& from);
  Motor_msg(Motor_msg&& from) noexcept
    : Motor_msg() {
    *this = ::std::move(from);
  }

  inline Motor_msg& operator=(const Motor_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motor_msg& operator=(Motor_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motor_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motor_msg* internal_default_instance() {
    return reinterpret_cast<const Motor_msg*>(
               &_Motor_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Motor_msg& a, Motor_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Motor_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motor_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Motor_msg* New() const final {
    return new Motor_msg();
  }

  Motor_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Motor_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Motor_msg& from);
  void MergeFrom(const Motor_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motor_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.Motor_msg";
  }
  protected:
  explicit Motor_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFRHipFieldNumber = 1,
    kFRThighFieldNumber = 2,
    kFRCalfFieldNumber = 3,
    kFLHipFieldNumber = 4,
    kFLThighFieldNumber = 5,
    kFLCalfFieldNumber = 6,
    kRRHipFieldNumber = 7,
    kRRThighFieldNumber = 8,
    kRRCalfFieldNumber = 9,
    kRLHipFieldNumber = 10,
    kRLThighFieldNumber = 11,
    kRLCalfFieldNumber = 12,
    kTimeFieldNumber = 13,
  };
  // double FR_Hip = 1;
  void clear_fr_hip();
  double fr_hip() const;
  void set_fr_hip(double value);
  private:
  double _internal_fr_hip() const;
  void _internal_set_fr_hip(double value);
  public:

  // double FR_Thigh = 2;
  void clear_fr_thigh();
  double fr_thigh() const;
  void set_fr_thigh(double value);
  private:
  double _internal_fr_thigh() const;
  void _internal_set_fr_thigh(double value);
  public:

  // double FR_Calf = 3;
  void clear_fr_calf();
  double fr_calf() const;
  void set_fr_calf(double value);
  private:
  double _internal_fr_calf() const;
  void _internal_set_fr_calf(double value);
  public:

  // double FL_Hip = 4;
  void clear_fl_hip();
  double fl_hip() const;
  void set_fl_hip(double value);
  private:
  double _internal_fl_hip() const;
  void _internal_set_fl_hip(double value);
  public:

  // double FL_Thigh = 5;
  void clear_fl_thigh();
  double fl_thigh() const;
  void set_fl_thigh(double value);
  private:
  double _internal_fl_thigh() const;
  void _internal_set_fl_thigh(double value);
  public:

  // double FL_Calf = 6;
  void clear_fl_calf();
  double fl_calf() const;
  void set_fl_calf(double value);
  private:
  double _internal_fl_calf() const;
  void _internal_set_fl_calf(double value);
  public:

  // double RR_Hip = 7;
  void clear_rr_hip();
  double rr_hip() const;
  void set_rr_hip(double value);
  private:
  double _internal_rr_hip() const;
  void _internal_set_rr_hip(double value);
  public:

  // double RR_Thigh = 8;
  void clear_rr_thigh();
  double rr_thigh() const;
  void set_rr_thigh(double value);
  private:
  double _internal_rr_thigh() const;
  void _internal_set_rr_thigh(double value);
  public:

  // double RR_Calf = 9;
  void clear_rr_calf();
  double rr_calf() const;
  void set_rr_calf(double value);
  private:
  double _internal_rr_calf() const;
  void _internal_set_rr_calf(double value);
  public:

  // double RL_Hip = 10;
  void clear_rl_hip();
  double rl_hip() const;
  void set_rl_hip(double value);
  private:
  double _internal_rl_hip() const;
  void _internal_set_rl_hip(double value);
  public:

  // double RL_Thigh = 11;
  void clear_rl_thigh();
  double rl_thigh() const;
  void set_rl_thigh(double value);
  private:
  double _internal_rl_thigh() const;
  void _internal_set_rl_thigh(double value);
  public:

  // double RL_Calf = 12;
  void clear_rl_calf();
  double rl_calf() const;
  void set_rl_calf(double value);
  private:
  double _internal_rl_calf() const;
  void _internal_set_rl_calf(double value);
  public:

  // double time = 13;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.Motor_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double fr_hip_;
  double fr_thigh_;
  double fr_calf_;
  double fl_hip_;
  double fl_thigh_;
  double fl_calf_;
  double rr_hip_;
  double rr_thigh_;
  double rr_calf_;
  double rl_hip_;
  double rl_thigh_;
  double rl_calf_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class EKF_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.EKF_msg) */ {
 public:
  inline EKF_msg() : EKF_msg(nullptr) {}
  ~EKF_msg() override;
  explicit constexpr EKF_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EKF_msg(const EKF_msg& from);
  EKF_msg(EKF_msg&& from) noexcept
    : EKF_msg() {
    *this = ::std::move(from);
  }

  inline EKF_msg& operator=(const EKF_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline EKF_msg& operator=(EKF_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EKF_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const EKF_msg* internal_default_instance() {
    return reinterpret_cast<const EKF_msg*>(
               &_EKF_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EKF_msg& a, EKF_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(EKF_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EKF_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EKF_msg* New() const final {
    return new EKF_msg();
  }

  EKF_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EKF_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EKF_msg& from);
  void MergeFrom(const EKF_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EKF_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.EKF_msg";
  }
  protected:
  explicit EKF_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kQuaternionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAccelerationBiasFieldNumber = 4,
    kAngularVelocityBiasFieldNumber = 5,
    kAngularVelocityFieldNumber = 6,
    kTimeFieldNumber = 7,
  };
  // .messaging.Vector3_msg position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::messaging::Vector3_msg& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_position();
  ::messaging::Vector3_msg* mutable_position();
  void set_allocated_position(::messaging::Vector3_msg* position);
  private:
  const ::messaging::Vector3_msg& _internal_position() const;
  ::messaging::Vector3_msg* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::messaging::Vector3_msg* position);
  ::messaging::Vector3_msg* unsafe_arena_release_position();

  // .messaging.Quaternion_msg quaternion = 2;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::messaging::Quaternion_msg& quaternion() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Quaternion_msg* release_quaternion();
  ::messaging::Quaternion_msg* mutable_quaternion();
  void set_allocated_quaternion(::messaging::Quaternion_msg* quaternion);
  private:
  const ::messaging::Quaternion_msg& _internal_quaternion() const;
  ::messaging::Quaternion_msg* _internal_mutable_quaternion();
  public:
  void unsafe_arena_set_allocated_quaternion(
      ::messaging::Quaternion_msg* quaternion);
  ::messaging::Quaternion_msg* unsafe_arena_release_quaternion();

  // .messaging.Vector3_msg velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::messaging::Vector3_msg& velocity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_velocity();
  ::messaging::Vector3_msg* mutable_velocity();
  void set_allocated_velocity(::messaging::Vector3_msg* velocity);
  private:
  const ::messaging::Vector3_msg& _internal_velocity() const;
  ::messaging::Vector3_msg* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::messaging::Vector3_msg* velocity);
  ::messaging::Vector3_msg* unsafe_arena_release_velocity();

  // .messaging.Vector3_msg acceleration_bias = 4;
  bool has_acceleration_bias() const;
  private:
  bool _internal_has_acceleration_bias() const;
  public:
  void clear_acceleration_bias();
  const ::messaging::Vector3_msg& acceleration_bias() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_acceleration_bias();
  ::messaging::Vector3_msg* mutable_acceleration_bias();
  void set_allocated_acceleration_bias(::messaging::Vector3_msg* acceleration_bias);
  private:
  const ::messaging::Vector3_msg& _internal_acceleration_bias() const;
  ::messaging::Vector3_msg* _internal_mutable_acceleration_bias();
  public:
  void unsafe_arena_set_allocated_acceleration_bias(
      ::messaging::Vector3_msg* acceleration_bias);
  ::messaging::Vector3_msg* unsafe_arena_release_acceleration_bias();

  // .messaging.Vector3_msg angular_velocity_bias = 5;
  bool has_angular_velocity_bias() const;
  private:
  bool _internal_has_angular_velocity_bias() const;
  public:
  void clear_angular_velocity_bias();
  const ::messaging::Vector3_msg& angular_velocity_bias() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_angular_velocity_bias();
  ::messaging::Vector3_msg* mutable_angular_velocity_bias();
  void set_allocated_angular_velocity_bias(::messaging::Vector3_msg* angular_velocity_bias);
  private:
  const ::messaging::Vector3_msg& _internal_angular_velocity_bias() const;
  ::messaging::Vector3_msg* _internal_mutable_angular_velocity_bias();
  public:
  void unsafe_arena_set_allocated_angular_velocity_bias(
      ::messaging::Vector3_msg* angular_velocity_bias);
  ::messaging::Vector3_msg* unsafe_arena_release_angular_velocity_bias();

  // .messaging.Vector3_msg angular_velocity = 6;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::messaging::Vector3_msg& angular_velocity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_angular_velocity();
  ::messaging::Vector3_msg* mutable_angular_velocity();
  void set_allocated_angular_velocity(::messaging::Vector3_msg* angular_velocity);
  private:
  const ::messaging::Vector3_msg& _internal_angular_velocity() const;
  ::messaging::Vector3_msg* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::messaging::Vector3_msg* angular_velocity);
  ::messaging::Vector3_msg* unsafe_arena_release_angular_velocity();

  // double time = 7;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.EKF_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::messaging::Vector3_msg* position_;
  ::messaging::Quaternion_msg* quaternion_;
  ::messaging::Vector3_msg* velocity_;
  ::messaging::Vector3_msg* acceleration_bias_;
  ::messaging::Vector3_msg* angular_velocity_bias_;
  ::messaging::Vector3_msg* angular_velocity_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class IMU_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.IMU_msg) */ {
 public:
  inline IMU_msg() : IMU_msg(nullptr) {}
  ~IMU_msg() override;
  explicit constexpr IMU_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMU_msg(const IMU_msg& from);
  IMU_msg(IMU_msg&& from) noexcept
    : IMU_msg() {
    *this = ::std::move(from);
  }

  inline IMU_msg& operator=(const IMU_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU_msg& operator=(IMU_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMU_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU_msg* internal_default_instance() {
    return reinterpret_cast<const IMU_msg*>(
               &_IMU_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMU_msg& a, IMU_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU_msg* New() const final {
    return new IMU_msg();
  }

  IMU_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU_msg& from);
  void MergeFrom(const IMU_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.IMU_msg";
  }
  protected:
  explicit IMU_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 1,
    kGyroscopeFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // .messaging.Vector3_msg acceleration = 1;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::messaging::Vector3_msg& acceleration() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_acceleration();
  ::messaging::Vector3_msg* mutable_acceleration();
  void set_allocated_acceleration(::messaging::Vector3_msg* acceleration);
  private:
  const ::messaging::Vector3_msg& _internal_acceleration() const;
  ::messaging::Vector3_msg* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::messaging::Vector3_msg* acceleration);
  ::messaging::Vector3_msg* unsafe_arena_release_acceleration();

  // .messaging.Vector3_msg gyroscope = 2;
  bool has_gyroscope() const;
  private:
  bool _internal_has_gyroscope() const;
  public:
  void clear_gyroscope();
  const ::messaging::Vector3_msg& gyroscope() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_gyroscope();
  ::messaging::Vector3_msg* mutable_gyroscope();
  void set_allocated_gyroscope(::messaging::Vector3_msg* gyroscope);
  private:
  const ::messaging::Vector3_msg& _internal_gyroscope() const;
  ::messaging::Vector3_msg* _internal_mutable_gyroscope();
  public:
  void unsafe_arena_set_allocated_gyroscope(
      ::messaging::Vector3_msg* gyroscope);
  ::messaging::Vector3_msg* unsafe_arena_release_gyroscope();

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.IMU_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::messaging::Vector3_msg* acceleration_;
  ::messaging::Vector3_msg* gyroscope_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Vicon_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.Vicon_msg) */ {
 public:
  inline Vicon_msg() : Vicon_msg(nullptr) {}
  ~Vicon_msg() override;
  explicit constexpr Vicon_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vicon_msg(const Vicon_msg& from);
  Vicon_msg(Vicon_msg&& from) noexcept
    : Vicon_msg() {
    *this = ::std::move(from);
  }

  inline Vicon_msg& operator=(const Vicon_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vicon_msg& operator=(Vicon_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vicon_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vicon_msg* internal_default_instance() {
    return reinterpret_cast<const Vicon_msg*>(
               &_Vicon_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Vicon_msg& a, Vicon_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Vicon_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vicon_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vicon_msg* New() const final {
    return new Vicon_msg();
  }

  Vicon_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vicon_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vicon_msg& from);
  void MergeFrom(const Vicon_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vicon_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.Vicon_msg";
  }
  protected:
  explicit Vicon_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kQuaternionFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // .messaging.Vector3_msg position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::messaging::Vector3_msg& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Vector3_msg* release_position();
  ::messaging::Vector3_msg* mutable_position();
  void set_allocated_position(::messaging::Vector3_msg* position);
  private:
  const ::messaging::Vector3_msg& _internal_position() const;
  ::messaging::Vector3_msg* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::messaging::Vector3_msg* position);
  ::messaging::Vector3_msg* unsafe_arena_release_position();

  // .messaging.Quaternion_msg quaternion = 2;
  bool has_quaternion() const;
  private:
  bool _internal_has_quaternion() const;
  public:
  void clear_quaternion();
  const ::messaging::Quaternion_msg& quaternion() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::messaging::Quaternion_msg* release_quaternion();
  ::messaging::Quaternion_msg* mutable_quaternion();
  void set_allocated_quaternion(::messaging::Quaternion_msg* quaternion);
  private:
  const ::messaging::Quaternion_msg& _internal_quaternion() const;
  ::messaging::Quaternion_msg* _internal_mutable_quaternion();
  public:
  void unsafe_arena_set_allocated_quaternion(
      ::messaging::Quaternion_msg* quaternion);
  ::messaging::Quaternion_msg* unsafe_arena_release_quaternion();

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.Vicon_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::messaging::Vector3_msg* position_;
  ::messaging::Quaternion_msg* quaternion_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Vector3_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.Vector3_msg) */ {
 public:
  inline Vector3_msg() : Vector3_msg(nullptr) {}
  ~Vector3_msg() override;
  explicit constexpr Vector3_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3_msg(const Vector3_msg& from);
  Vector3_msg(Vector3_msg&& from) noexcept
    : Vector3_msg() {
    *this = ::std::move(from);
  }

  inline Vector3_msg& operator=(const Vector3_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3_msg& operator=(Vector3_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3_msg* internal_default_instance() {
    return reinterpret_cast<const Vector3_msg*>(
               &_Vector3_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Vector3_msg& a, Vector3_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3_msg* New() const final {
    return new Vector3_msg();
  }

  Vector3_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3_msg& from);
  void MergeFrom(const Vector3_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.Vector3_msg";
  }
  protected:
  explicit Vector3_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.Vector3_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Quaternion_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.Quaternion_msg) */ {
 public:
  inline Quaternion_msg() : Quaternion_msg(nullptr) {}
  ~Quaternion_msg() override;
  explicit constexpr Quaternion_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion_msg(const Quaternion_msg& from);
  Quaternion_msg(Quaternion_msg&& from) noexcept
    : Quaternion_msg() {
    *this = ::std::move(from);
  }

  inline Quaternion_msg& operator=(const Quaternion_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion_msg& operator=(Quaternion_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion_msg* internal_default_instance() {
    return reinterpret_cast<const Quaternion_msg*>(
               &_Quaternion_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Quaternion_msg& a, Quaternion_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion_msg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion_msg* New() const final {
    return new Quaternion_msg();
  }

  Quaternion_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion_msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion_msg& from);
  void MergeFrom(const Quaternion_msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion_msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.Quaternion_msg";
  }
  protected:
  explicit Quaternion_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // double w = 1;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 4;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.Quaternion_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double w_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ErrorMsg

// .messaging.Vector3_msg position = 1;
inline bool ErrorMsg::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool ErrorMsg::has_position() const {
  return _internal_has_position();
}
inline void ErrorMsg::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::messaging::Vector3_msg& ErrorMsg::_internal_position() const {
  const ::messaging::Vector3_msg* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& ErrorMsg::position() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.position)
  return _internal_position();
}
inline void ErrorMsg::unsafe_arena_set_allocated_position(
    ::messaging::Vector3_msg* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.ErrorMsg.position)
}
inline ::messaging::Vector3_msg* ErrorMsg::release_position() {
  
  ::messaging::Vector3_msg* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:messaging.ErrorMsg.position)
  
  ::messaging::Vector3_msg* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::messaging::Vector3_msg* ErrorMsg::mutable_position() {
  // @@protoc_insertion_point(field_mutable:messaging.ErrorMsg.position)
  return _internal_mutable_position();
}
inline void ErrorMsg::set_allocated_position(::messaging::Vector3_msg* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:messaging.ErrorMsg.position)
}

// .messaging.Vector3_msg orientation = 2;
inline bool ErrorMsg::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool ErrorMsg::has_orientation() const {
  return _internal_has_orientation();
}
inline void ErrorMsg::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::messaging::Vector3_msg& ErrorMsg::_internal_orientation() const {
  const ::messaging::Vector3_msg* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& ErrorMsg::orientation() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.orientation)
  return _internal_orientation();
}
inline void ErrorMsg::unsafe_arena_set_allocated_orientation(
    ::messaging::Vector3_msg* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.ErrorMsg.orientation)
}
inline ::messaging::Vector3_msg* ErrorMsg::release_orientation() {
  
  ::messaging::Vector3_msg* temp = orientation_;
  orientation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:messaging.ErrorMsg.orientation)
  
  ::messaging::Vector3_msg* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::messaging::Vector3_msg* ErrorMsg::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:messaging.ErrorMsg.orientation)
  return _internal_mutable_orientation();
}
inline void ErrorMsg::set_allocated_orientation(::messaging::Vector3_msg* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:messaging.ErrorMsg.orientation)
}

// .messaging.Vector3_msg vel = 3;
inline bool ErrorMsg::_internal_has_vel() const {
  return this != internal_default_instance() && vel_ != nullptr;
}
inline bool ErrorMsg::has_vel() const {
  return _internal_has_vel();
}
inline void ErrorMsg::clear_vel() {
  if (GetArenaForAllocation() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
inline const ::messaging::Vector3_msg& ErrorMsg::_internal_vel() const {
  const ::messaging::Vector3_msg* p = vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& ErrorMsg::vel() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.vel)
  return _internal_vel();
}
inline void ErrorMsg::unsafe_arena_set_allocated_vel(
    ::messaging::Vector3_msg* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_);
  }
  vel_ = vel;
  if (vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.ErrorMsg.vel)
}
inline ::messaging::Vector3_msg* ErrorMsg::release_vel() {
  
  ::messaging::Vector3_msg* temp = vel_;
  vel_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:messaging.ErrorMsg.vel)
  
  ::messaging::Vector3_msg* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::_internal_mutable_vel() {
  
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    vel_ = p;
  }
  return vel_;
}
inline ::messaging::Vector3_msg* ErrorMsg::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:messaging.ErrorMsg.vel)
  return _internal_mutable_vel();
}
inline void ErrorMsg::set_allocated_vel(::messaging::Vector3_msg* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(vel);
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:messaging.ErrorMsg.vel)
}

// .messaging.Vector3_msg angular_vel = 4;
inline bool ErrorMsg::_internal_has_angular_vel() const {
  return this != internal_default_instance() && angular_vel_ != nullptr;
}
inline bool ErrorMsg::has_angular_vel() const {
  return _internal_has_angular_vel();
}
inline void ErrorMsg::clear_angular_vel() {
  if (GetArenaForAllocation() == nullptr && angular_vel_ != nullptr) {
    delete angular_vel_;
  }
  angular_vel_ = nullptr;
}
inline const ::messaging::Vector3_msg& ErrorMsg::_internal_angular_vel() const {
  const ::messaging::Vector3_msg* p = angular_vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& ErrorMsg::angular_vel() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.angular_vel)
  return _internal_angular_vel();
}
inline void ErrorMsg::unsafe_arena_set_allocated_angular_vel(
    ::messaging::Vector3_msg* angular_vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_vel_);
  }
  angular_vel_ = angular_vel;
  if (angular_vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.ErrorMsg.angular_vel)
}
inline ::messaging::Vector3_msg* ErrorMsg::release_angular_vel() {
  
  ::messaging::Vector3_msg* temp = angular_vel_;
  angular_vel_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::unsafe_arena_release_angular_vel() {
  // @@protoc_insertion_point(field_release:messaging.ErrorMsg.angular_vel)
  
  ::messaging::Vector3_msg* temp = angular_vel_;
  angular_vel_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* ErrorMsg::_internal_mutable_angular_vel() {
  
  if (angular_vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    angular_vel_ = p;
  }
  return angular_vel_;
}
inline ::messaging::Vector3_msg* ErrorMsg::mutable_angular_vel() {
  // @@protoc_insertion_point(field_mutable:messaging.ErrorMsg.angular_vel)
  return _internal_mutable_angular_vel();
}
inline void ErrorMsg::set_allocated_angular_vel(::messaging::Vector3_msg* angular_vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_vel_;
  }
  if (angular_vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(angular_vel);
    if (message_arena != submessage_arena) {
      angular_vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_vel, submessage_arena);
    }
    
  } else {
    
  }
  angular_vel_ = angular_vel;
  // @@protoc_insertion_point(field_set_allocated:messaging.ErrorMsg.angular_vel)
}

// .messaging.Motor_msg motor_pos = 5;
inline bool ErrorMsg::_internal_has_motor_pos() const {
  return this != internal_default_instance() && motor_pos_ != nullptr;
}
inline bool ErrorMsg::has_motor_pos() const {
  return _internal_has_motor_pos();
}
inline void ErrorMsg::clear_motor_pos() {
  if (GetArenaForAllocation() == nullptr && motor_pos_ != nullptr) {
    delete motor_pos_;
  }
  motor_pos_ = nullptr;
}
inline const ::messaging::Motor_msg& ErrorMsg::_internal_motor_pos() const {
  const ::messaging::Motor_msg* p = motor_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Motor_msg&>(
      ::messaging::_Motor_msg_default_instance_);
}
inline const ::messaging::Motor_msg& ErrorMsg::motor_pos() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.motor_pos)
  return _internal_motor_pos();
}
inline void ErrorMsg::unsafe_arena_set_allocated_motor_pos(
    ::messaging::Motor_msg* motor_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motor_pos_);
  }
  motor_pos_ = motor_pos;
  if (motor_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.ErrorMsg.motor_pos)
}
inline ::messaging::Motor_msg* ErrorMsg::release_motor_pos() {
  
  ::messaging::Motor_msg* temp = motor_pos_;
  motor_pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Motor_msg* ErrorMsg::unsafe_arena_release_motor_pos() {
  // @@protoc_insertion_point(field_release:messaging.ErrorMsg.motor_pos)
  
  ::messaging::Motor_msg* temp = motor_pos_;
  motor_pos_ = nullptr;
  return temp;
}
inline ::messaging::Motor_msg* ErrorMsg::_internal_mutable_motor_pos() {
  
  if (motor_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Motor_msg>(GetArenaForAllocation());
    motor_pos_ = p;
  }
  return motor_pos_;
}
inline ::messaging::Motor_msg* ErrorMsg::mutable_motor_pos() {
  // @@protoc_insertion_point(field_mutable:messaging.ErrorMsg.motor_pos)
  return _internal_mutable_motor_pos();
}
inline void ErrorMsg::set_allocated_motor_pos(::messaging::Motor_msg* motor_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete motor_pos_;
  }
  if (motor_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Motor_msg>::GetOwningArena(motor_pos);
    if (message_arena != submessage_arena) {
      motor_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motor_pos, submessage_arena);
    }
    
  } else {
    
  }
  motor_pos_ = motor_pos;
  // @@protoc_insertion_point(field_set_allocated:messaging.ErrorMsg.motor_pos)
}

// .messaging.Motor_msg motor_vel = 6;
inline bool ErrorMsg::_internal_has_motor_vel() const {
  return this != internal_default_instance() && motor_vel_ != nullptr;
}
inline bool ErrorMsg::has_motor_vel() const {
  return _internal_has_motor_vel();
}
inline void ErrorMsg::clear_motor_vel() {
  if (GetArenaForAllocation() == nullptr && motor_vel_ != nullptr) {
    delete motor_vel_;
  }
  motor_vel_ = nullptr;
}
inline const ::messaging::Motor_msg& ErrorMsg::_internal_motor_vel() const {
  const ::messaging::Motor_msg* p = motor_vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Motor_msg&>(
      ::messaging::_Motor_msg_default_instance_);
}
inline const ::messaging::Motor_msg& ErrorMsg::motor_vel() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.motor_vel)
  return _internal_motor_vel();
}
inline void ErrorMsg::unsafe_arena_set_allocated_motor_vel(
    ::messaging::Motor_msg* motor_vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motor_vel_);
  }
  motor_vel_ = motor_vel;
  if (motor_vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.ErrorMsg.motor_vel)
}
inline ::messaging::Motor_msg* ErrorMsg::release_motor_vel() {
  
  ::messaging::Motor_msg* temp = motor_vel_;
  motor_vel_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Motor_msg* ErrorMsg::unsafe_arena_release_motor_vel() {
  // @@protoc_insertion_point(field_release:messaging.ErrorMsg.motor_vel)
  
  ::messaging::Motor_msg* temp = motor_vel_;
  motor_vel_ = nullptr;
  return temp;
}
inline ::messaging::Motor_msg* ErrorMsg::_internal_mutable_motor_vel() {
  
  if (motor_vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Motor_msg>(GetArenaForAllocation());
    motor_vel_ = p;
  }
  return motor_vel_;
}
inline ::messaging::Motor_msg* ErrorMsg::mutable_motor_vel() {
  // @@protoc_insertion_point(field_mutable:messaging.ErrorMsg.motor_vel)
  return _internal_mutable_motor_vel();
}
inline void ErrorMsg::set_allocated_motor_vel(::messaging::Motor_msg* motor_vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete motor_vel_;
  }
  if (motor_vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Motor_msg>::GetOwningArena(motor_vel);
    if (message_arena != submessage_arena) {
      motor_vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motor_vel, submessage_arena);
    }
    
  } else {
    
  }
  motor_vel_ = motor_vel;
  // @@protoc_insertion_point(field_set_allocated:messaging.ErrorMsg.motor_vel)
}

// double time = 7;
inline void ErrorMsg::clear_time() {
  time_ = 0;
}
inline double ErrorMsg::_internal_time() const {
  return time_;
}
inline double ErrorMsg::time() const {
  // @@protoc_insertion_point(field_get:messaging.ErrorMsg.time)
  return _internal_time();
}
inline void ErrorMsg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void ErrorMsg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.ErrorMsg.time)
}

// -------------------------------------------------------------------

// MotorCmds_msg

// .messaging.MotorCmd_msg FR_Hip = 1;
inline bool MotorCmds_msg::_internal_has_fr_hip() const {
  return this != internal_default_instance() && fr_hip_ != nullptr;
}
inline bool MotorCmds_msg::has_fr_hip() const {
  return _internal_has_fr_hip();
}
inline void MotorCmds_msg::clear_fr_hip() {
  if (GetArenaForAllocation() == nullptr && fr_hip_ != nullptr) {
    delete fr_hip_;
  }
  fr_hip_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_fr_hip() const {
  const ::messaging::MotorCmd_msg* p = fr_hip_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::fr_hip() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.FR_Hip)
  return _internal_fr_hip();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_fr_hip(
    ::messaging::MotorCmd_msg* fr_hip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fr_hip_);
  }
  fr_hip_ = fr_hip;
  if (fr_hip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.FR_Hip)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_fr_hip() {
  
  ::messaging::MotorCmd_msg* temp = fr_hip_;
  fr_hip_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_fr_hip() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.FR_Hip)
  
  ::messaging::MotorCmd_msg* temp = fr_hip_;
  fr_hip_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_fr_hip() {
  
  if (fr_hip_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    fr_hip_ = p;
  }
  return fr_hip_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_fr_hip() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.FR_Hip)
  return _internal_mutable_fr_hip();
}
inline void MotorCmds_msg::set_allocated_fr_hip(::messaging::MotorCmd_msg* fr_hip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fr_hip_;
  }
  if (fr_hip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(fr_hip);
    if (message_arena != submessage_arena) {
      fr_hip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fr_hip, submessage_arena);
    }
    
  } else {
    
  }
  fr_hip_ = fr_hip;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.FR_Hip)
}

// .messaging.MotorCmd_msg FR_Thigh = 2;
inline bool MotorCmds_msg::_internal_has_fr_thigh() const {
  return this != internal_default_instance() && fr_thigh_ != nullptr;
}
inline bool MotorCmds_msg::has_fr_thigh() const {
  return _internal_has_fr_thigh();
}
inline void MotorCmds_msg::clear_fr_thigh() {
  if (GetArenaForAllocation() == nullptr && fr_thigh_ != nullptr) {
    delete fr_thigh_;
  }
  fr_thigh_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_fr_thigh() const {
  const ::messaging::MotorCmd_msg* p = fr_thigh_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::fr_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.FR_Thigh)
  return _internal_fr_thigh();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_fr_thigh(
    ::messaging::MotorCmd_msg* fr_thigh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fr_thigh_);
  }
  fr_thigh_ = fr_thigh;
  if (fr_thigh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.FR_Thigh)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_fr_thigh() {
  
  ::messaging::MotorCmd_msg* temp = fr_thigh_;
  fr_thigh_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_fr_thigh() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.FR_Thigh)
  
  ::messaging::MotorCmd_msg* temp = fr_thigh_;
  fr_thigh_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_fr_thigh() {
  
  if (fr_thigh_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    fr_thigh_ = p;
  }
  return fr_thigh_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_fr_thigh() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.FR_Thigh)
  return _internal_mutable_fr_thigh();
}
inline void MotorCmds_msg::set_allocated_fr_thigh(::messaging::MotorCmd_msg* fr_thigh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fr_thigh_;
  }
  if (fr_thigh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(fr_thigh);
    if (message_arena != submessage_arena) {
      fr_thigh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fr_thigh, submessage_arena);
    }
    
  } else {
    
  }
  fr_thigh_ = fr_thigh;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.FR_Thigh)
}

// .messaging.MotorCmd_msg FR_Calf = 3;
inline bool MotorCmds_msg::_internal_has_fr_calf() const {
  return this != internal_default_instance() && fr_calf_ != nullptr;
}
inline bool MotorCmds_msg::has_fr_calf() const {
  return _internal_has_fr_calf();
}
inline void MotorCmds_msg::clear_fr_calf() {
  if (GetArenaForAllocation() == nullptr && fr_calf_ != nullptr) {
    delete fr_calf_;
  }
  fr_calf_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_fr_calf() const {
  const ::messaging::MotorCmd_msg* p = fr_calf_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::fr_calf() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.FR_Calf)
  return _internal_fr_calf();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_fr_calf(
    ::messaging::MotorCmd_msg* fr_calf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fr_calf_);
  }
  fr_calf_ = fr_calf;
  if (fr_calf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.FR_Calf)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_fr_calf() {
  
  ::messaging::MotorCmd_msg* temp = fr_calf_;
  fr_calf_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_fr_calf() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.FR_Calf)
  
  ::messaging::MotorCmd_msg* temp = fr_calf_;
  fr_calf_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_fr_calf() {
  
  if (fr_calf_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    fr_calf_ = p;
  }
  return fr_calf_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_fr_calf() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.FR_Calf)
  return _internal_mutable_fr_calf();
}
inline void MotorCmds_msg::set_allocated_fr_calf(::messaging::MotorCmd_msg* fr_calf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fr_calf_;
  }
  if (fr_calf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(fr_calf);
    if (message_arena != submessage_arena) {
      fr_calf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fr_calf, submessage_arena);
    }
    
  } else {
    
  }
  fr_calf_ = fr_calf;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.FR_Calf)
}

// .messaging.MotorCmd_msg FL_Hip = 4;
inline bool MotorCmds_msg::_internal_has_fl_hip() const {
  return this != internal_default_instance() && fl_hip_ != nullptr;
}
inline bool MotorCmds_msg::has_fl_hip() const {
  return _internal_has_fl_hip();
}
inline void MotorCmds_msg::clear_fl_hip() {
  if (GetArenaForAllocation() == nullptr && fl_hip_ != nullptr) {
    delete fl_hip_;
  }
  fl_hip_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_fl_hip() const {
  const ::messaging::MotorCmd_msg* p = fl_hip_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::fl_hip() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.FL_Hip)
  return _internal_fl_hip();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_fl_hip(
    ::messaging::MotorCmd_msg* fl_hip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fl_hip_);
  }
  fl_hip_ = fl_hip;
  if (fl_hip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.FL_Hip)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_fl_hip() {
  
  ::messaging::MotorCmd_msg* temp = fl_hip_;
  fl_hip_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_fl_hip() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.FL_Hip)
  
  ::messaging::MotorCmd_msg* temp = fl_hip_;
  fl_hip_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_fl_hip() {
  
  if (fl_hip_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    fl_hip_ = p;
  }
  return fl_hip_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_fl_hip() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.FL_Hip)
  return _internal_mutable_fl_hip();
}
inline void MotorCmds_msg::set_allocated_fl_hip(::messaging::MotorCmd_msg* fl_hip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fl_hip_;
  }
  if (fl_hip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(fl_hip);
    if (message_arena != submessage_arena) {
      fl_hip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fl_hip, submessage_arena);
    }
    
  } else {
    
  }
  fl_hip_ = fl_hip;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.FL_Hip)
}

// .messaging.MotorCmd_msg FL_Thigh = 5;
inline bool MotorCmds_msg::_internal_has_fl_thigh() const {
  return this != internal_default_instance() && fl_thigh_ != nullptr;
}
inline bool MotorCmds_msg::has_fl_thigh() const {
  return _internal_has_fl_thigh();
}
inline void MotorCmds_msg::clear_fl_thigh() {
  if (GetArenaForAllocation() == nullptr && fl_thigh_ != nullptr) {
    delete fl_thigh_;
  }
  fl_thigh_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_fl_thigh() const {
  const ::messaging::MotorCmd_msg* p = fl_thigh_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::fl_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.FL_Thigh)
  return _internal_fl_thigh();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_fl_thigh(
    ::messaging::MotorCmd_msg* fl_thigh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fl_thigh_);
  }
  fl_thigh_ = fl_thigh;
  if (fl_thigh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.FL_Thigh)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_fl_thigh() {
  
  ::messaging::MotorCmd_msg* temp = fl_thigh_;
  fl_thigh_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_fl_thigh() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.FL_Thigh)
  
  ::messaging::MotorCmd_msg* temp = fl_thigh_;
  fl_thigh_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_fl_thigh() {
  
  if (fl_thigh_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    fl_thigh_ = p;
  }
  return fl_thigh_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_fl_thigh() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.FL_Thigh)
  return _internal_mutable_fl_thigh();
}
inline void MotorCmds_msg::set_allocated_fl_thigh(::messaging::MotorCmd_msg* fl_thigh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fl_thigh_;
  }
  if (fl_thigh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(fl_thigh);
    if (message_arena != submessage_arena) {
      fl_thigh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fl_thigh, submessage_arena);
    }
    
  } else {
    
  }
  fl_thigh_ = fl_thigh;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.FL_Thigh)
}

// .messaging.MotorCmd_msg FL_Calf = 6;
inline bool MotorCmds_msg::_internal_has_fl_calf() const {
  return this != internal_default_instance() && fl_calf_ != nullptr;
}
inline bool MotorCmds_msg::has_fl_calf() const {
  return _internal_has_fl_calf();
}
inline void MotorCmds_msg::clear_fl_calf() {
  if (GetArenaForAllocation() == nullptr && fl_calf_ != nullptr) {
    delete fl_calf_;
  }
  fl_calf_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_fl_calf() const {
  const ::messaging::MotorCmd_msg* p = fl_calf_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::fl_calf() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.FL_Calf)
  return _internal_fl_calf();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_fl_calf(
    ::messaging::MotorCmd_msg* fl_calf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fl_calf_);
  }
  fl_calf_ = fl_calf;
  if (fl_calf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.FL_Calf)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_fl_calf() {
  
  ::messaging::MotorCmd_msg* temp = fl_calf_;
  fl_calf_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_fl_calf() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.FL_Calf)
  
  ::messaging::MotorCmd_msg* temp = fl_calf_;
  fl_calf_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_fl_calf() {
  
  if (fl_calf_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    fl_calf_ = p;
  }
  return fl_calf_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_fl_calf() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.FL_Calf)
  return _internal_mutable_fl_calf();
}
inline void MotorCmds_msg::set_allocated_fl_calf(::messaging::MotorCmd_msg* fl_calf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fl_calf_;
  }
  if (fl_calf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(fl_calf);
    if (message_arena != submessage_arena) {
      fl_calf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fl_calf, submessage_arena);
    }
    
  } else {
    
  }
  fl_calf_ = fl_calf;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.FL_Calf)
}

// .messaging.MotorCmd_msg RR_Hip = 7;
inline bool MotorCmds_msg::_internal_has_rr_hip() const {
  return this != internal_default_instance() && rr_hip_ != nullptr;
}
inline bool MotorCmds_msg::has_rr_hip() const {
  return _internal_has_rr_hip();
}
inline void MotorCmds_msg::clear_rr_hip() {
  if (GetArenaForAllocation() == nullptr && rr_hip_ != nullptr) {
    delete rr_hip_;
  }
  rr_hip_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_rr_hip() const {
  const ::messaging::MotorCmd_msg* p = rr_hip_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::rr_hip() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.RR_Hip)
  return _internal_rr_hip();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_rr_hip(
    ::messaging::MotorCmd_msg* rr_hip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rr_hip_);
  }
  rr_hip_ = rr_hip;
  if (rr_hip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.RR_Hip)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_rr_hip() {
  
  ::messaging::MotorCmd_msg* temp = rr_hip_;
  rr_hip_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_rr_hip() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.RR_Hip)
  
  ::messaging::MotorCmd_msg* temp = rr_hip_;
  rr_hip_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_rr_hip() {
  
  if (rr_hip_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    rr_hip_ = p;
  }
  return rr_hip_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_rr_hip() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.RR_Hip)
  return _internal_mutable_rr_hip();
}
inline void MotorCmds_msg::set_allocated_rr_hip(::messaging::MotorCmd_msg* rr_hip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rr_hip_;
  }
  if (rr_hip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(rr_hip);
    if (message_arena != submessage_arena) {
      rr_hip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rr_hip, submessage_arena);
    }
    
  } else {
    
  }
  rr_hip_ = rr_hip;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.RR_Hip)
}

// .messaging.MotorCmd_msg RR_Thigh = 8;
inline bool MotorCmds_msg::_internal_has_rr_thigh() const {
  return this != internal_default_instance() && rr_thigh_ != nullptr;
}
inline bool MotorCmds_msg::has_rr_thigh() const {
  return _internal_has_rr_thigh();
}
inline void MotorCmds_msg::clear_rr_thigh() {
  if (GetArenaForAllocation() == nullptr && rr_thigh_ != nullptr) {
    delete rr_thigh_;
  }
  rr_thigh_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_rr_thigh() const {
  const ::messaging::MotorCmd_msg* p = rr_thigh_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::rr_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.RR_Thigh)
  return _internal_rr_thigh();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_rr_thigh(
    ::messaging::MotorCmd_msg* rr_thigh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rr_thigh_);
  }
  rr_thigh_ = rr_thigh;
  if (rr_thigh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.RR_Thigh)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_rr_thigh() {
  
  ::messaging::MotorCmd_msg* temp = rr_thigh_;
  rr_thigh_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_rr_thigh() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.RR_Thigh)
  
  ::messaging::MotorCmd_msg* temp = rr_thigh_;
  rr_thigh_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_rr_thigh() {
  
  if (rr_thigh_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    rr_thigh_ = p;
  }
  return rr_thigh_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_rr_thigh() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.RR_Thigh)
  return _internal_mutable_rr_thigh();
}
inline void MotorCmds_msg::set_allocated_rr_thigh(::messaging::MotorCmd_msg* rr_thigh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rr_thigh_;
  }
  if (rr_thigh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(rr_thigh);
    if (message_arena != submessage_arena) {
      rr_thigh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rr_thigh, submessage_arena);
    }
    
  } else {
    
  }
  rr_thigh_ = rr_thigh;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.RR_Thigh)
}

// .messaging.MotorCmd_msg RR_Calf = 9;
inline bool MotorCmds_msg::_internal_has_rr_calf() const {
  return this != internal_default_instance() && rr_calf_ != nullptr;
}
inline bool MotorCmds_msg::has_rr_calf() const {
  return _internal_has_rr_calf();
}
inline void MotorCmds_msg::clear_rr_calf() {
  if (GetArenaForAllocation() == nullptr && rr_calf_ != nullptr) {
    delete rr_calf_;
  }
  rr_calf_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_rr_calf() const {
  const ::messaging::MotorCmd_msg* p = rr_calf_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::rr_calf() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.RR_Calf)
  return _internal_rr_calf();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_rr_calf(
    ::messaging::MotorCmd_msg* rr_calf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rr_calf_);
  }
  rr_calf_ = rr_calf;
  if (rr_calf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.RR_Calf)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_rr_calf() {
  
  ::messaging::MotorCmd_msg* temp = rr_calf_;
  rr_calf_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_rr_calf() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.RR_Calf)
  
  ::messaging::MotorCmd_msg* temp = rr_calf_;
  rr_calf_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_rr_calf() {
  
  if (rr_calf_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    rr_calf_ = p;
  }
  return rr_calf_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_rr_calf() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.RR_Calf)
  return _internal_mutable_rr_calf();
}
inline void MotorCmds_msg::set_allocated_rr_calf(::messaging::MotorCmd_msg* rr_calf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rr_calf_;
  }
  if (rr_calf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(rr_calf);
    if (message_arena != submessage_arena) {
      rr_calf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rr_calf, submessage_arena);
    }
    
  } else {
    
  }
  rr_calf_ = rr_calf;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.RR_Calf)
}

// .messaging.MotorCmd_msg RL_Hip = 10;
inline bool MotorCmds_msg::_internal_has_rl_hip() const {
  return this != internal_default_instance() && rl_hip_ != nullptr;
}
inline bool MotorCmds_msg::has_rl_hip() const {
  return _internal_has_rl_hip();
}
inline void MotorCmds_msg::clear_rl_hip() {
  if (GetArenaForAllocation() == nullptr && rl_hip_ != nullptr) {
    delete rl_hip_;
  }
  rl_hip_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_rl_hip() const {
  const ::messaging::MotorCmd_msg* p = rl_hip_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::rl_hip() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.RL_Hip)
  return _internal_rl_hip();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_rl_hip(
    ::messaging::MotorCmd_msg* rl_hip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rl_hip_);
  }
  rl_hip_ = rl_hip;
  if (rl_hip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.RL_Hip)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_rl_hip() {
  
  ::messaging::MotorCmd_msg* temp = rl_hip_;
  rl_hip_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_rl_hip() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.RL_Hip)
  
  ::messaging::MotorCmd_msg* temp = rl_hip_;
  rl_hip_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_rl_hip() {
  
  if (rl_hip_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    rl_hip_ = p;
  }
  return rl_hip_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_rl_hip() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.RL_Hip)
  return _internal_mutable_rl_hip();
}
inline void MotorCmds_msg::set_allocated_rl_hip(::messaging::MotorCmd_msg* rl_hip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rl_hip_;
  }
  if (rl_hip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(rl_hip);
    if (message_arena != submessage_arena) {
      rl_hip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rl_hip, submessage_arena);
    }
    
  } else {
    
  }
  rl_hip_ = rl_hip;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.RL_Hip)
}

// .messaging.MotorCmd_msg RL_Thigh = 11;
inline bool MotorCmds_msg::_internal_has_rl_thigh() const {
  return this != internal_default_instance() && rl_thigh_ != nullptr;
}
inline bool MotorCmds_msg::has_rl_thigh() const {
  return _internal_has_rl_thigh();
}
inline void MotorCmds_msg::clear_rl_thigh() {
  if (GetArenaForAllocation() == nullptr && rl_thigh_ != nullptr) {
    delete rl_thigh_;
  }
  rl_thigh_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_rl_thigh() const {
  const ::messaging::MotorCmd_msg* p = rl_thigh_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::rl_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.RL_Thigh)
  return _internal_rl_thigh();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_rl_thigh(
    ::messaging::MotorCmd_msg* rl_thigh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rl_thigh_);
  }
  rl_thigh_ = rl_thigh;
  if (rl_thigh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.RL_Thigh)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_rl_thigh() {
  
  ::messaging::MotorCmd_msg* temp = rl_thigh_;
  rl_thigh_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_rl_thigh() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.RL_Thigh)
  
  ::messaging::MotorCmd_msg* temp = rl_thigh_;
  rl_thigh_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_rl_thigh() {
  
  if (rl_thigh_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    rl_thigh_ = p;
  }
  return rl_thigh_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_rl_thigh() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.RL_Thigh)
  return _internal_mutable_rl_thigh();
}
inline void MotorCmds_msg::set_allocated_rl_thigh(::messaging::MotorCmd_msg* rl_thigh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rl_thigh_;
  }
  if (rl_thigh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(rl_thigh);
    if (message_arena != submessage_arena) {
      rl_thigh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rl_thigh, submessage_arena);
    }
    
  } else {
    
  }
  rl_thigh_ = rl_thigh;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.RL_Thigh)
}

// .messaging.MotorCmd_msg RL_Calf = 12;
inline bool MotorCmds_msg::_internal_has_rl_calf() const {
  return this != internal_default_instance() && rl_calf_ != nullptr;
}
inline bool MotorCmds_msg::has_rl_calf() const {
  return _internal_has_rl_calf();
}
inline void MotorCmds_msg::clear_rl_calf() {
  if (GetArenaForAllocation() == nullptr && rl_calf_ != nullptr) {
    delete rl_calf_;
  }
  rl_calf_ = nullptr;
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::_internal_rl_calf() const {
  const ::messaging::MotorCmd_msg* p = rl_calf_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::MotorCmd_msg&>(
      ::messaging::_MotorCmd_msg_default_instance_);
}
inline const ::messaging::MotorCmd_msg& MotorCmds_msg::rl_calf() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.RL_Calf)
  return _internal_rl_calf();
}
inline void MotorCmds_msg::unsafe_arena_set_allocated_rl_calf(
    ::messaging::MotorCmd_msg* rl_calf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rl_calf_);
  }
  rl_calf_ = rl_calf;
  if (rl_calf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorCmds_msg.RL_Calf)
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::release_rl_calf() {
  
  ::messaging::MotorCmd_msg* temp = rl_calf_;
  rl_calf_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::unsafe_arena_release_rl_calf() {
  // @@protoc_insertion_point(field_release:messaging.MotorCmds_msg.RL_Calf)
  
  ::messaging::MotorCmd_msg* temp = rl_calf_;
  rl_calf_ = nullptr;
  return temp;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::_internal_mutable_rl_calf() {
  
  if (rl_calf_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::MotorCmd_msg>(GetArenaForAllocation());
    rl_calf_ = p;
  }
  return rl_calf_;
}
inline ::messaging::MotorCmd_msg* MotorCmds_msg::mutable_rl_calf() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorCmds_msg.RL_Calf)
  return _internal_mutable_rl_calf();
}
inline void MotorCmds_msg::set_allocated_rl_calf(::messaging::MotorCmd_msg* rl_calf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rl_calf_;
  }
  if (rl_calf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::MotorCmd_msg>::GetOwningArena(rl_calf);
    if (message_arena != submessage_arena) {
      rl_calf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rl_calf, submessage_arena);
    }
    
  } else {
    
  }
  rl_calf_ = rl_calf;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorCmds_msg.RL_Calf)
}

// double time = 13;
inline void MotorCmds_msg::clear_time() {
  time_ = 0;
}
inline double MotorCmds_msg::_internal_time() const {
  return time_;
}
inline double MotorCmds_msg::time() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmds_msg.time)
  return _internal_time();
}
inline void MotorCmds_msg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void MotorCmds_msg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.MotorCmds_msg.time)
}

// -------------------------------------------------------------------

// MotorCmd_msg

// double Kp = 1;
inline void MotorCmd_msg::clear_kp() {
  kp_ = 0;
}
inline double MotorCmd_msg::_internal_kp() const {
  return kp_;
}
inline double MotorCmd_msg::kp() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmd_msg.Kp)
  return _internal_kp();
}
inline void MotorCmd_msg::_internal_set_kp(double value) {
  
  kp_ = value;
}
inline void MotorCmd_msg::set_kp(double value) {
  _internal_set_kp(value);
  // @@protoc_insertion_point(field_set:messaging.MotorCmd_msg.Kp)
}

// double Kd = 2;
inline void MotorCmd_msg::clear_kd() {
  kd_ = 0;
}
inline double MotorCmd_msg::_internal_kd() const {
  return kd_;
}
inline double MotorCmd_msg::kd() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmd_msg.Kd)
  return _internal_kd();
}
inline void MotorCmd_msg::_internal_set_kd(double value) {
  
  kd_ = value;
}
inline void MotorCmd_msg::set_kd(double value) {
  _internal_set_kd(value);
  // @@protoc_insertion_point(field_set:messaging.MotorCmd_msg.Kd)
}

// double pos = 3;
inline void MotorCmd_msg::clear_pos() {
  pos_ = 0;
}
inline double MotorCmd_msg::_internal_pos() const {
  return pos_;
}
inline double MotorCmd_msg::pos() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmd_msg.pos)
  return _internal_pos();
}
inline void MotorCmd_msg::_internal_set_pos(double value) {
  
  pos_ = value;
}
inline void MotorCmd_msg::set_pos(double value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:messaging.MotorCmd_msg.pos)
}

// double vel = 4;
inline void MotorCmd_msg::clear_vel() {
  vel_ = 0;
}
inline double MotorCmd_msg::_internal_vel() const {
  return vel_;
}
inline double MotorCmd_msg::vel() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmd_msg.vel)
  return _internal_vel();
}
inline void MotorCmd_msg::_internal_set_vel(double value) {
  
  vel_ = value;
}
inline void MotorCmd_msg::set_vel(double value) {
  _internal_set_vel(value);
  // @@protoc_insertion_point(field_set:messaging.MotorCmd_msg.vel)
}

// double tau = 5;
inline void MotorCmd_msg::clear_tau() {
  tau_ = 0;
}
inline double MotorCmd_msg::_internal_tau() const {
  return tau_;
}
inline double MotorCmd_msg::tau() const {
  // @@protoc_insertion_point(field_get:messaging.MotorCmd_msg.tau)
  return _internal_tau();
}
inline void MotorCmd_msg::_internal_set_tau(double value) {
  
  tau_ = value;
}
inline void MotorCmd_msg::set_tau(double value) {
  _internal_set_tau(value);
  // @@protoc_insertion_point(field_set:messaging.MotorCmd_msg.tau)
}

// -------------------------------------------------------------------

// MotorReadings_msg

// .messaging.Motor_msg torques = 1;
inline bool MotorReadings_msg::_internal_has_torques() const {
  return this != internal_default_instance() && torques_ != nullptr;
}
inline bool MotorReadings_msg::has_torques() const {
  return _internal_has_torques();
}
inline void MotorReadings_msg::clear_torques() {
  if (GetArenaForAllocation() == nullptr && torques_ != nullptr) {
    delete torques_;
  }
  torques_ = nullptr;
}
inline const ::messaging::Motor_msg& MotorReadings_msg::_internal_torques() const {
  const ::messaging::Motor_msg* p = torques_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Motor_msg&>(
      ::messaging::_Motor_msg_default_instance_);
}
inline const ::messaging::Motor_msg& MotorReadings_msg::torques() const {
  // @@protoc_insertion_point(field_get:messaging.MotorReadings_msg.torques)
  return _internal_torques();
}
inline void MotorReadings_msg::unsafe_arena_set_allocated_torques(
    ::messaging::Motor_msg* torques) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torques_);
  }
  torques_ = torques;
  if (torques) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorReadings_msg.torques)
}
inline ::messaging::Motor_msg* MotorReadings_msg::release_torques() {
  
  ::messaging::Motor_msg* temp = torques_;
  torques_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Motor_msg* MotorReadings_msg::unsafe_arena_release_torques() {
  // @@protoc_insertion_point(field_release:messaging.MotorReadings_msg.torques)
  
  ::messaging::Motor_msg* temp = torques_;
  torques_ = nullptr;
  return temp;
}
inline ::messaging::Motor_msg* MotorReadings_msg::_internal_mutable_torques() {
  
  if (torques_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Motor_msg>(GetArenaForAllocation());
    torques_ = p;
  }
  return torques_;
}
inline ::messaging::Motor_msg* MotorReadings_msg::mutable_torques() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorReadings_msg.torques)
  return _internal_mutable_torques();
}
inline void MotorReadings_msg::set_allocated_torques(::messaging::Motor_msg* torques) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete torques_;
  }
  if (torques) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Motor_msg>::GetOwningArena(torques);
    if (message_arena != submessage_arena) {
      torques = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torques, submessage_arena);
    }
    
  } else {
    
  }
  torques_ = torques;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorReadings_msg.torques)
}

// .messaging.Motor_msg positions = 2;
inline bool MotorReadings_msg::_internal_has_positions() const {
  return this != internal_default_instance() && positions_ != nullptr;
}
inline bool MotorReadings_msg::has_positions() const {
  return _internal_has_positions();
}
inline void MotorReadings_msg::clear_positions() {
  if (GetArenaForAllocation() == nullptr && positions_ != nullptr) {
    delete positions_;
  }
  positions_ = nullptr;
}
inline const ::messaging::Motor_msg& MotorReadings_msg::_internal_positions() const {
  const ::messaging::Motor_msg* p = positions_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Motor_msg&>(
      ::messaging::_Motor_msg_default_instance_);
}
inline const ::messaging::Motor_msg& MotorReadings_msg::positions() const {
  // @@protoc_insertion_point(field_get:messaging.MotorReadings_msg.positions)
  return _internal_positions();
}
inline void MotorReadings_msg::unsafe_arena_set_allocated_positions(
    ::messaging::Motor_msg* positions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positions_);
  }
  positions_ = positions;
  if (positions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorReadings_msg.positions)
}
inline ::messaging::Motor_msg* MotorReadings_msg::release_positions() {
  
  ::messaging::Motor_msg* temp = positions_;
  positions_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Motor_msg* MotorReadings_msg::unsafe_arena_release_positions() {
  // @@protoc_insertion_point(field_release:messaging.MotorReadings_msg.positions)
  
  ::messaging::Motor_msg* temp = positions_;
  positions_ = nullptr;
  return temp;
}
inline ::messaging::Motor_msg* MotorReadings_msg::_internal_mutable_positions() {
  
  if (positions_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Motor_msg>(GetArenaForAllocation());
    positions_ = p;
  }
  return positions_;
}
inline ::messaging::Motor_msg* MotorReadings_msg::mutable_positions() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorReadings_msg.positions)
  return _internal_mutable_positions();
}
inline void MotorReadings_msg::set_allocated_positions(::messaging::Motor_msg* positions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete positions_;
  }
  if (positions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Motor_msg>::GetOwningArena(positions);
    if (message_arena != submessage_arena) {
      positions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positions, submessage_arena);
    }
    
  } else {
    
  }
  positions_ = positions;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorReadings_msg.positions)
}

// .messaging.Motor_msg velocities = 3;
inline bool MotorReadings_msg::_internal_has_velocities() const {
  return this != internal_default_instance() && velocities_ != nullptr;
}
inline bool MotorReadings_msg::has_velocities() const {
  return _internal_has_velocities();
}
inline void MotorReadings_msg::clear_velocities() {
  if (GetArenaForAllocation() == nullptr && velocities_ != nullptr) {
    delete velocities_;
  }
  velocities_ = nullptr;
}
inline const ::messaging::Motor_msg& MotorReadings_msg::_internal_velocities() const {
  const ::messaging::Motor_msg* p = velocities_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Motor_msg&>(
      ::messaging::_Motor_msg_default_instance_);
}
inline const ::messaging::Motor_msg& MotorReadings_msg::velocities() const {
  // @@protoc_insertion_point(field_get:messaging.MotorReadings_msg.velocities)
  return _internal_velocities();
}
inline void MotorReadings_msg::unsafe_arena_set_allocated_velocities(
    ::messaging::Motor_msg* velocities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocities_);
  }
  velocities_ = velocities;
  if (velocities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.MotorReadings_msg.velocities)
}
inline ::messaging::Motor_msg* MotorReadings_msg::release_velocities() {
  
  ::messaging::Motor_msg* temp = velocities_;
  velocities_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Motor_msg* MotorReadings_msg::unsafe_arena_release_velocities() {
  // @@protoc_insertion_point(field_release:messaging.MotorReadings_msg.velocities)
  
  ::messaging::Motor_msg* temp = velocities_;
  velocities_ = nullptr;
  return temp;
}
inline ::messaging::Motor_msg* MotorReadings_msg::_internal_mutable_velocities() {
  
  if (velocities_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Motor_msg>(GetArenaForAllocation());
    velocities_ = p;
  }
  return velocities_;
}
inline ::messaging::Motor_msg* MotorReadings_msg::mutable_velocities() {
  // @@protoc_insertion_point(field_mutable:messaging.MotorReadings_msg.velocities)
  return _internal_mutable_velocities();
}
inline void MotorReadings_msg::set_allocated_velocities(::messaging::Motor_msg* velocities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocities_;
  }
  if (velocities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Motor_msg>::GetOwningArena(velocities);
    if (message_arena != submessage_arena) {
      velocities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocities, submessage_arena);
    }
    
  } else {
    
  }
  velocities_ = velocities;
  // @@protoc_insertion_point(field_set_allocated:messaging.MotorReadings_msg.velocities)
}

// double time = 5;
inline void MotorReadings_msg::clear_time() {
  time_ = 0;
}
inline double MotorReadings_msg::_internal_time() const {
  return time_;
}
inline double MotorReadings_msg::time() const {
  // @@protoc_insertion_point(field_get:messaging.MotorReadings_msg.time)
  return _internal_time();
}
inline void MotorReadings_msg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void MotorReadings_msg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.MotorReadings_msg.time)
}

// -------------------------------------------------------------------

// Motor_msg

// double FR_Hip = 1;
inline void Motor_msg::clear_fr_hip() {
  fr_hip_ = 0;
}
inline double Motor_msg::_internal_fr_hip() const {
  return fr_hip_;
}
inline double Motor_msg::fr_hip() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.FR_Hip)
  return _internal_fr_hip();
}
inline void Motor_msg::_internal_set_fr_hip(double value) {
  
  fr_hip_ = value;
}
inline void Motor_msg::set_fr_hip(double value) {
  _internal_set_fr_hip(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.FR_Hip)
}

// double FR_Thigh = 2;
inline void Motor_msg::clear_fr_thigh() {
  fr_thigh_ = 0;
}
inline double Motor_msg::_internal_fr_thigh() const {
  return fr_thigh_;
}
inline double Motor_msg::fr_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.FR_Thigh)
  return _internal_fr_thigh();
}
inline void Motor_msg::_internal_set_fr_thigh(double value) {
  
  fr_thigh_ = value;
}
inline void Motor_msg::set_fr_thigh(double value) {
  _internal_set_fr_thigh(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.FR_Thigh)
}

// double FR_Calf = 3;
inline void Motor_msg::clear_fr_calf() {
  fr_calf_ = 0;
}
inline double Motor_msg::_internal_fr_calf() const {
  return fr_calf_;
}
inline double Motor_msg::fr_calf() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.FR_Calf)
  return _internal_fr_calf();
}
inline void Motor_msg::_internal_set_fr_calf(double value) {
  
  fr_calf_ = value;
}
inline void Motor_msg::set_fr_calf(double value) {
  _internal_set_fr_calf(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.FR_Calf)
}

// double FL_Hip = 4;
inline void Motor_msg::clear_fl_hip() {
  fl_hip_ = 0;
}
inline double Motor_msg::_internal_fl_hip() const {
  return fl_hip_;
}
inline double Motor_msg::fl_hip() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.FL_Hip)
  return _internal_fl_hip();
}
inline void Motor_msg::_internal_set_fl_hip(double value) {
  
  fl_hip_ = value;
}
inline void Motor_msg::set_fl_hip(double value) {
  _internal_set_fl_hip(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.FL_Hip)
}

// double FL_Thigh = 5;
inline void Motor_msg::clear_fl_thigh() {
  fl_thigh_ = 0;
}
inline double Motor_msg::_internal_fl_thigh() const {
  return fl_thigh_;
}
inline double Motor_msg::fl_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.FL_Thigh)
  return _internal_fl_thigh();
}
inline void Motor_msg::_internal_set_fl_thigh(double value) {
  
  fl_thigh_ = value;
}
inline void Motor_msg::set_fl_thigh(double value) {
  _internal_set_fl_thigh(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.FL_Thigh)
}

// double FL_Calf = 6;
inline void Motor_msg::clear_fl_calf() {
  fl_calf_ = 0;
}
inline double Motor_msg::_internal_fl_calf() const {
  return fl_calf_;
}
inline double Motor_msg::fl_calf() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.FL_Calf)
  return _internal_fl_calf();
}
inline void Motor_msg::_internal_set_fl_calf(double value) {
  
  fl_calf_ = value;
}
inline void Motor_msg::set_fl_calf(double value) {
  _internal_set_fl_calf(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.FL_Calf)
}

// double RR_Hip = 7;
inline void Motor_msg::clear_rr_hip() {
  rr_hip_ = 0;
}
inline double Motor_msg::_internal_rr_hip() const {
  return rr_hip_;
}
inline double Motor_msg::rr_hip() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.RR_Hip)
  return _internal_rr_hip();
}
inline void Motor_msg::_internal_set_rr_hip(double value) {
  
  rr_hip_ = value;
}
inline void Motor_msg::set_rr_hip(double value) {
  _internal_set_rr_hip(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.RR_Hip)
}

// double RR_Thigh = 8;
inline void Motor_msg::clear_rr_thigh() {
  rr_thigh_ = 0;
}
inline double Motor_msg::_internal_rr_thigh() const {
  return rr_thigh_;
}
inline double Motor_msg::rr_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.RR_Thigh)
  return _internal_rr_thigh();
}
inline void Motor_msg::_internal_set_rr_thigh(double value) {
  
  rr_thigh_ = value;
}
inline void Motor_msg::set_rr_thigh(double value) {
  _internal_set_rr_thigh(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.RR_Thigh)
}

// double RR_Calf = 9;
inline void Motor_msg::clear_rr_calf() {
  rr_calf_ = 0;
}
inline double Motor_msg::_internal_rr_calf() const {
  return rr_calf_;
}
inline double Motor_msg::rr_calf() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.RR_Calf)
  return _internal_rr_calf();
}
inline void Motor_msg::_internal_set_rr_calf(double value) {
  
  rr_calf_ = value;
}
inline void Motor_msg::set_rr_calf(double value) {
  _internal_set_rr_calf(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.RR_Calf)
}

// double RL_Hip = 10;
inline void Motor_msg::clear_rl_hip() {
  rl_hip_ = 0;
}
inline double Motor_msg::_internal_rl_hip() const {
  return rl_hip_;
}
inline double Motor_msg::rl_hip() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.RL_Hip)
  return _internal_rl_hip();
}
inline void Motor_msg::_internal_set_rl_hip(double value) {
  
  rl_hip_ = value;
}
inline void Motor_msg::set_rl_hip(double value) {
  _internal_set_rl_hip(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.RL_Hip)
}

// double RL_Thigh = 11;
inline void Motor_msg::clear_rl_thigh() {
  rl_thigh_ = 0;
}
inline double Motor_msg::_internal_rl_thigh() const {
  return rl_thigh_;
}
inline double Motor_msg::rl_thigh() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.RL_Thigh)
  return _internal_rl_thigh();
}
inline void Motor_msg::_internal_set_rl_thigh(double value) {
  
  rl_thigh_ = value;
}
inline void Motor_msg::set_rl_thigh(double value) {
  _internal_set_rl_thigh(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.RL_Thigh)
}

// double RL_Calf = 12;
inline void Motor_msg::clear_rl_calf() {
  rl_calf_ = 0;
}
inline double Motor_msg::_internal_rl_calf() const {
  return rl_calf_;
}
inline double Motor_msg::rl_calf() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.RL_Calf)
  return _internal_rl_calf();
}
inline void Motor_msg::_internal_set_rl_calf(double value) {
  
  rl_calf_ = value;
}
inline void Motor_msg::set_rl_calf(double value) {
  _internal_set_rl_calf(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.RL_Calf)
}

// double time = 13;
inline void Motor_msg::clear_time() {
  time_ = 0;
}
inline double Motor_msg::_internal_time() const {
  return time_;
}
inline double Motor_msg::time() const {
  // @@protoc_insertion_point(field_get:messaging.Motor_msg.time)
  return _internal_time();
}
inline void Motor_msg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Motor_msg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.Motor_msg.time)
}

// -------------------------------------------------------------------

// EKF_msg

// .messaging.Vector3_msg position = 1;
inline bool EKF_msg::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool EKF_msg::has_position() const {
  return _internal_has_position();
}
inline void EKF_msg::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::messaging::Vector3_msg& EKF_msg::_internal_position() const {
  const ::messaging::Vector3_msg* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& EKF_msg::position() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.position)
  return _internal_position();
}
inline void EKF_msg::unsafe_arena_set_allocated_position(
    ::messaging::Vector3_msg* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.EKF_msg.position)
}
inline ::messaging::Vector3_msg* EKF_msg::release_position() {
  
  ::messaging::Vector3_msg* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:messaging.EKF_msg.position)
  
  ::messaging::Vector3_msg* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::messaging::Vector3_msg* EKF_msg::mutable_position() {
  // @@protoc_insertion_point(field_mutable:messaging.EKF_msg.position)
  return _internal_mutable_position();
}
inline void EKF_msg::set_allocated_position(::messaging::Vector3_msg* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:messaging.EKF_msg.position)
}

// .messaging.Quaternion_msg quaternion = 2;
inline bool EKF_msg::_internal_has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != nullptr;
}
inline bool EKF_msg::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void EKF_msg::clear_quaternion() {
  if (GetArenaForAllocation() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
}
inline const ::messaging::Quaternion_msg& EKF_msg::_internal_quaternion() const {
  const ::messaging::Quaternion_msg* p = quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Quaternion_msg&>(
      ::messaging::_Quaternion_msg_default_instance_);
}
inline const ::messaging::Quaternion_msg& EKF_msg::quaternion() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.quaternion)
  return _internal_quaternion();
}
inline void EKF_msg::unsafe_arena_set_allocated_quaternion(
    ::messaging::Quaternion_msg* quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_);
  }
  quaternion_ = quaternion;
  if (quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.EKF_msg.quaternion)
}
inline ::messaging::Quaternion_msg* EKF_msg::release_quaternion() {
  
  ::messaging::Quaternion_msg* temp = quaternion_;
  quaternion_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Quaternion_msg* EKF_msg::unsafe_arena_release_quaternion() {
  // @@protoc_insertion_point(field_release:messaging.EKF_msg.quaternion)
  
  ::messaging::Quaternion_msg* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::messaging::Quaternion_msg* EKF_msg::_internal_mutable_quaternion() {
  
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Quaternion_msg>(GetArenaForAllocation());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::messaging::Quaternion_msg* EKF_msg::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:messaging.EKF_msg.quaternion)
  return _internal_mutable_quaternion();
}
inline void EKF_msg::set_allocated_quaternion(::messaging::Quaternion_msg* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete quaternion_;
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Quaternion_msg>::GetOwningArena(quaternion);
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:messaging.EKF_msg.quaternion)
}

// .messaging.Vector3_msg velocity = 3;
inline bool EKF_msg::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool EKF_msg::has_velocity() const {
  return _internal_has_velocity();
}
inline void EKF_msg::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::messaging::Vector3_msg& EKF_msg::_internal_velocity() const {
  const ::messaging::Vector3_msg* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& EKF_msg::velocity() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.velocity)
  return _internal_velocity();
}
inline void EKF_msg::unsafe_arena_set_allocated_velocity(
    ::messaging::Vector3_msg* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.EKF_msg.velocity)
}
inline ::messaging::Vector3_msg* EKF_msg::release_velocity() {
  
  ::messaging::Vector3_msg* temp = velocity_;
  velocity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:messaging.EKF_msg.velocity)
  
  ::messaging::Vector3_msg* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::messaging::Vector3_msg* EKF_msg::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:messaging.EKF_msg.velocity)
  return _internal_mutable_velocity();
}
inline void EKF_msg::set_allocated_velocity(::messaging::Vector3_msg* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:messaging.EKF_msg.velocity)
}

// .messaging.Vector3_msg acceleration_bias = 4;
inline bool EKF_msg::_internal_has_acceleration_bias() const {
  return this != internal_default_instance() && acceleration_bias_ != nullptr;
}
inline bool EKF_msg::has_acceleration_bias() const {
  return _internal_has_acceleration_bias();
}
inline void EKF_msg::clear_acceleration_bias() {
  if (GetArenaForAllocation() == nullptr && acceleration_bias_ != nullptr) {
    delete acceleration_bias_;
  }
  acceleration_bias_ = nullptr;
}
inline const ::messaging::Vector3_msg& EKF_msg::_internal_acceleration_bias() const {
  const ::messaging::Vector3_msg* p = acceleration_bias_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& EKF_msg::acceleration_bias() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.acceleration_bias)
  return _internal_acceleration_bias();
}
inline void EKF_msg::unsafe_arena_set_allocated_acceleration_bias(
    ::messaging::Vector3_msg* acceleration_bias) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_bias_);
  }
  acceleration_bias_ = acceleration_bias;
  if (acceleration_bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.EKF_msg.acceleration_bias)
}
inline ::messaging::Vector3_msg* EKF_msg::release_acceleration_bias() {
  
  ::messaging::Vector3_msg* temp = acceleration_bias_;
  acceleration_bias_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::unsafe_arena_release_acceleration_bias() {
  // @@protoc_insertion_point(field_release:messaging.EKF_msg.acceleration_bias)
  
  ::messaging::Vector3_msg* temp = acceleration_bias_;
  acceleration_bias_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::_internal_mutable_acceleration_bias() {
  
  if (acceleration_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    acceleration_bias_ = p;
  }
  return acceleration_bias_;
}
inline ::messaging::Vector3_msg* EKF_msg::mutable_acceleration_bias() {
  // @@protoc_insertion_point(field_mutable:messaging.EKF_msg.acceleration_bias)
  return _internal_mutable_acceleration_bias();
}
inline void EKF_msg::set_allocated_acceleration_bias(::messaging::Vector3_msg* acceleration_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acceleration_bias_;
  }
  if (acceleration_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(acceleration_bias);
    if (message_arena != submessage_arena) {
      acceleration_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration_bias, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_bias_ = acceleration_bias;
  // @@protoc_insertion_point(field_set_allocated:messaging.EKF_msg.acceleration_bias)
}

// .messaging.Vector3_msg angular_velocity_bias = 5;
inline bool EKF_msg::_internal_has_angular_velocity_bias() const {
  return this != internal_default_instance() && angular_velocity_bias_ != nullptr;
}
inline bool EKF_msg::has_angular_velocity_bias() const {
  return _internal_has_angular_velocity_bias();
}
inline void EKF_msg::clear_angular_velocity_bias() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_bias_ != nullptr) {
    delete angular_velocity_bias_;
  }
  angular_velocity_bias_ = nullptr;
}
inline const ::messaging::Vector3_msg& EKF_msg::_internal_angular_velocity_bias() const {
  const ::messaging::Vector3_msg* p = angular_velocity_bias_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& EKF_msg::angular_velocity_bias() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.angular_velocity_bias)
  return _internal_angular_velocity_bias();
}
inline void EKF_msg::unsafe_arena_set_allocated_angular_velocity_bias(
    ::messaging::Vector3_msg* angular_velocity_bias) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_bias_);
  }
  angular_velocity_bias_ = angular_velocity_bias;
  if (angular_velocity_bias) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.EKF_msg.angular_velocity_bias)
}
inline ::messaging::Vector3_msg* EKF_msg::release_angular_velocity_bias() {
  
  ::messaging::Vector3_msg* temp = angular_velocity_bias_;
  angular_velocity_bias_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::unsafe_arena_release_angular_velocity_bias() {
  // @@protoc_insertion_point(field_release:messaging.EKF_msg.angular_velocity_bias)
  
  ::messaging::Vector3_msg* temp = angular_velocity_bias_;
  angular_velocity_bias_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::_internal_mutable_angular_velocity_bias() {
  
  if (angular_velocity_bias_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    angular_velocity_bias_ = p;
  }
  return angular_velocity_bias_;
}
inline ::messaging::Vector3_msg* EKF_msg::mutable_angular_velocity_bias() {
  // @@protoc_insertion_point(field_mutable:messaging.EKF_msg.angular_velocity_bias)
  return _internal_mutable_angular_velocity_bias();
}
inline void EKF_msg::set_allocated_angular_velocity_bias(::messaging::Vector3_msg* angular_velocity_bias) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_bias_;
  }
  if (angular_velocity_bias) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(angular_velocity_bias);
    if (message_arena != submessage_arena) {
      angular_velocity_bias = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_bias, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_bias_ = angular_velocity_bias;
  // @@protoc_insertion_point(field_set_allocated:messaging.EKF_msg.angular_velocity_bias)
}

// .messaging.Vector3_msg angular_velocity = 6;
inline bool EKF_msg::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool EKF_msg::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void EKF_msg::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
inline const ::messaging::Vector3_msg& EKF_msg::_internal_angular_velocity() const {
  const ::messaging::Vector3_msg* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& EKF_msg::angular_velocity() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.angular_velocity)
  return _internal_angular_velocity();
}
inline void EKF_msg::unsafe_arena_set_allocated_angular_velocity(
    ::messaging::Vector3_msg* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.EKF_msg.angular_velocity)
}
inline ::messaging::Vector3_msg* EKF_msg::release_angular_velocity() {
  
  ::messaging::Vector3_msg* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:messaging.EKF_msg.angular_velocity)
  
  ::messaging::Vector3_msg* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* EKF_msg::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::messaging::Vector3_msg* EKF_msg::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:messaging.EKF_msg.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void EKF_msg::set_allocated_angular_velocity(::messaging::Vector3_msg* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:messaging.EKF_msg.angular_velocity)
}

// double time = 7;
inline void EKF_msg::clear_time() {
  time_ = 0;
}
inline double EKF_msg::_internal_time() const {
  return time_;
}
inline double EKF_msg::time() const {
  // @@protoc_insertion_point(field_get:messaging.EKF_msg.time)
  return _internal_time();
}
inline void EKF_msg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void EKF_msg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.EKF_msg.time)
}

// -------------------------------------------------------------------

// IMU_msg

// .messaging.Vector3_msg acceleration = 1;
inline bool IMU_msg::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool IMU_msg::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void IMU_msg::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::messaging::Vector3_msg& IMU_msg::_internal_acceleration() const {
  const ::messaging::Vector3_msg* p = acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& IMU_msg::acceleration() const {
  // @@protoc_insertion_point(field_get:messaging.IMU_msg.acceleration)
  return _internal_acceleration();
}
inline void IMU_msg::unsafe_arena_set_allocated_acceleration(
    ::messaging::Vector3_msg* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.IMU_msg.acceleration)
}
inline ::messaging::Vector3_msg* IMU_msg::release_acceleration() {
  
  ::messaging::Vector3_msg* temp = acceleration_;
  acceleration_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* IMU_msg::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:messaging.IMU_msg.acceleration)
  
  ::messaging::Vector3_msg* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* IMU_msg::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::messaging::Vector3_msg* IMU_msg::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:messaging.IMU_msg.acceleration)
  return _internal_mutable_acceleration();
}
inline void IMU_msg::set_allocated_acceleration(::messaging::Vector3_msg* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(acceleration);
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:messaging.IMU_msg.acceleration)
}

// .messaging.Vector3_msg gyroscope = 2;
inline bool IMU_msg::_internal_has_gyroscope() const {
  return this != internal_default_instance() && gyroscope_ != nullptr;
}
inline bool IMU_msg::has_gyroscope() const {
  return _internal_has_gyroscope();
}
inline void IMU_msg::clear_gyroscope() {
  if (GetArenaForAllocation() == nullptr && gyroscope_ != nullptr) {
    delete gyroscope_;
  }
  gyroscope_ = nullptr;
}
inline const ::messaging::Vector3_msg& IMU_msg::_internal_gyroscope() const {
  const ::messaging::Vector3_msg* p = gyroscope_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& IMU_msg::gyroscope() const {
  // @@protoc_insertion_point(field_get:messaging.IMU_msg.gyroscope)
  return _internal_gyroscope();
}
inline void IMU_msg::unsafe_arena_set_allocated_gyroscope(
    ::messaging::Vector3_msg* gyroscope) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyroscope_);
  }
  gyroscope_ = gyroscope;
  if (gyroscope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.IMU_msg.gyroscope)
}
inline ::messaging::Vector3_msg* IMU_msg::release_gyroscope() {
  
  ::messaging::Vector3_msg* temp = gyroscope_;
  gyroscope_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* IMU_msg::unsafe_arena_release_gyroscope() {
  // @@protoc_insertion_point(field_release:messaging.IMU_msg.gyroscope)
  
  ::messaging::Vector3_msg* temp = gyroscope_;
  gyroscope_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* IMU_msg::_internal_mutable_gyroscope() {
  
  if (gyroscope_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    gyroscope_ = p;
  }
  return gyroscope_;
}
inline ::messaging::Vector3_msg* IMU_msg::mutable_gyroscope() {
  // @@protoc_insertion_point(field_mutable:messaging.IMU_msg.gyroscope)
  return _internal_mutable_gyroscope();
}
inline void IMU_msg::set_allocated_gyroscope(::messaging::Vector3_msg* gyroscope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gyroscope_;
  }
  if (gyroscope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(gyroscope);
    if (message_arena != submessage_arena) {
      gyroscope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyroscope, submessage_arena);
    }
    
  } else {
    
  }
  gyroscope_ = gyroscope;
  // @@protoc_insertion_point(field_set_allocated:messaging.IMU_msg.gyroscope)
}

// double time = 3;
inline void IMU_msg::clear_time() {
  time_ = 0;
}
inline double IMU_msg::_internal_time() const {
  return time_;
}
inline double IMU_msg::time() const {
  // @@protoc_insertion_point(field_get:messaging.IMU_msg.time)
  return _internal_time();
}
inline void IMU_msg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void IMU_msg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.IMU_msg.time)
}

// -------------------------------------------------------------------

// Vicon_msg

// .messaging.Vector3_msg position = 1;
inline bool Vicon_msg::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Vicon_msg::has_position() const {
  return _internal_has_position();
}
inline void Vicon_msg::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::messaging::Vector3_msg& Vicon_msg::_internal_position() const {
  const ::messaging::Vector3_msg* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Vector3_msg&>(
      ::messaging::_Vector3_msg_default_instance_);
}
inline const ::messaging::Vector3_msg& Vicon_msg::position() const {
  // @@protoc_insertion_point(field_get:messaging.Vicon_msg.position)
  return _internal_position();
}
inline void Vicon_msg::unsafe_arena_set_allocated_position(
    ::messaging::Vector3_msg* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.Vicon_msg.position)
}
inline ::messaging::Vector3_msg* Vicon_msg::release_position() {
  
  ::messaging::Vector3_msg* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Vector3_msg* Vicon_msg::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:messaging.Vicon_msg.position)
  
  ::messaging::Vector3_msg* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::messaging::Vector3_msg* Vicon_msg::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Vector3_msg>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::messaging::Vector3_msg* Vicon_msg::mutable_position() {
  // @@protoc_insertion_point(field_mutable:messaging.Vicon_msg.position)
  return _internal_mutable_position();
}
inline void Vicon_msg::set_allocated_position(::messaging::Vector3_msg* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Vector3_msg>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:messaging.Vicon_msg.position)
}

// .messaging.Quaternion_msg quaternion = 2;
inline bool Vicon_msg::_internal_has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != nullptr;
}
inline bool Vicon_msg::has_quaternion() const {
  return _internal_has_quaternion();
}
inline void Vicon_msg::clear_quaternion() {
  if (GetArenaForAllocation() == nullptr && quaternion_ != nullptr) {
    delete quaternion_;
  }
  quaternion_ = nullptr;
}
inline const ::messaging::Quaternion_msg& Vicon_msg::_internal_quaternion() const {
  const ::messaging::Quaternion_msg* p = quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::messaging::Quaternion_msg&>(
      ::messaging::_Quaternion_msg_default_instance_);
}
inline const ::messaging::Quaternion_msg& Vicon_msg::quaternion() const {
  // @@protoc_insertion_point(field_get:messaging.Vicon_msg.quaternion)
  return _internal_quaternion();
}
inline void Vicon_msg::unsafe_arena_set_allocated_quaternion(
    ::messaging::Quaternion_msg* quaternion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_);
  }
  quaternion_ = quaternion;
  if (quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messaging.Vicon_msg.quaternion)
}
inline ::messaging::Quaternion_msg* Vicon_msg::release_quaternion() {
  
  ::messaging::Quaternion_msg* temp = quaternion_;
  quaternion_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messaging::Quaternion_msg* Vicon_msg::unsafe_arena_release_quaternion() {
  // @@protoc_insertion_point(field_release:messaging.Vicon_msg.quaternion)
  
  ::messaging::Quaternion_msg* temp = quaternion_;
  quaternion_ = nullptr;
  return temp;
}
inline ::messaging::Quaternion_msg* Vicon_msg::_internal_mutable_quaternion() {
  
  if (quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::messaging::Quaternion_msg>(GetArenaForAllocation());
    quaternion_ = p;
  }
  return quaternion_;
}
inline ::messaging::Quaternion_msg* Vicon_msg::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable:messaging.Vicon_msg.quaternion)
  return _internal_mutable_quaternion();
}
inline void Vicon_msg::set_allocated_quaternion(::messaging::Quaternion_msg* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete quaternion_;
  }
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::messaging::Quaternion_msg>::GetOwningArena(quaternion);
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    
  } else {
    
  }
  quaternion_ = quaternion;
  // @@protoc_insertion_point(field_set_allocated:messaging.Vicon_msg.quaternion)
}

// double time = 3;
inline void Vicon_msg::clear_time() {
  time_ = 0;
}
inline double Vicon_msg::_internal_time() const {
  return time_;
}
inline double Vicon_msg::time() const {
  // @@protoc_insertion_point(field_get:messaging.Vicon_msg.time)
  return _internal_time();
}
inline void Vicon_msg::_internal_set_time(double value) {
  
  time_ = value;
}
inline void Vicon_msg::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.Vicon_msg.time)
}

// -------------------------------------------------------------------

// Vector3_msg

// double x = 1;
inline void Vector3_msg::clear_x() {
  x_ = 0;
}
inline double Vector3_msg::_internal_x() const {
  return x_;
}
inline double Vector3_msg::x() const {
  // @@protoc_insertion_point(field_get:messaging.Vector3_msg.x)
  return _internal_x();
}
inline void Vector3_msg::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3_msg::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:messaging.Vector3_msg.x)
}

// double y = 2;
inline void Vector3_msg::clear_y() {
  y_ = 0;
}
inline double Vector3_msg::_internal_y() const {
  return y_;
}
inline double Vector3_msg::y() const {
  // @@protoc_insertion_point(field_get:messaging.Vector3_msg.y)
  return _internal_y();
}
inline void Vector3_msg::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3_msg::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:messaging.Vector3_msg.y)
}

// double z = 3;
inline void Vector3_msg::clear_z() {
  z_ = 0;
}
inline double Vector3_msg::_internal_z() const {
  return z_;
}
inline double Vector3_msg::z() const {
  // @@protoc_insertion_point(field_get:messaging.Vector3_msg.z)
  return _internal_z();
}
inline void Vector3_msg::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3_msg::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:messaging.Vector3_msg.z)
}

// -------------------------------------------------------------------

// Quaternion_msg

// double w = 1;
inline void Quaternion_msg::clear_w() {
  w_ = 0;
}
inline double Quaternion_msg::_internal_w() const {
  return w_;
}
inline double Quaternion_msg::w() const {
  // @@protoc_insertion_point(field_get:messaging.Quaternion_msg.w)
  return _internal_w();
}
inline void Quaternion_msg::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion_msg::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:messaging.Quaternion_msg.w)
}

// double x = 2;
inline void Quaternion_msg::clear_x() {
  x_ = 0;
}
inline double Quaternion_msg::_internal_x() const {
  return x_;
}
inline double Quaternion_msg::x() const {
  // @@protoc_insertion_point(field_get:messaging.Quaternion_msg.x)
  return _internal_x();
}
inline void Quaternion_msg::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion_msg::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:messaging.Quaternion_msg.x)
}

// double y = 3;
inline void Quaternion_msg::clear_y() {
  y_ = 0;
}
inline double Quaternion_msg::_internal_y() const {
  return y_;
}
inline double Quaternion_msg::y() const {
  // @@protoc_insertion_point(field_get:messaging.Quaternion_msg.y)
  return _internal_y();
}
inline void Quaternion_msg::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion_msg::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:messaging.Quaternion_msg.y)
}

// double z = 4;
inline void Quaternion_msg::clear_z() {
  z_ = 0;
}
inline double Quaternion_msg::_internal_z() const {
  return z_;
}
inline double Quaternion_msg::z() const {
  // @@protoc_insertion_point(field_get:messaging.Quaternion_msg.z)
  return _internal_z();
}
inline void Quaternion_msg::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion_msg::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:messaging.Quaternion_msg.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messaging

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
