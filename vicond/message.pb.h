// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace messaging {
class IMU;
struct IMUDefaultTypeInternal;
extern IMUDefaultTypeInternal _IMU_default_instance_;
class PROPERTY;
struct PROPERTYDefaultTypeInternal;
extern PROPERTYDefaultTypeInternal _PROPERTY_default_instance_;
class VICON;
struct VICONDefaultTypeInternal;
extern VICONDefaultTypeInternal _VICON_default_instance_;
}  // namespace messaging
PROTOBUF_NAMESPACE_OPEN
template<> ::messaging::IMU* Arena::CreateMaybeMessage<::messaging::IMU>(Arena*);
template<> ::messaging::PROPERTY* Arena::CreateMaybeMessage<::messaging::PROPERTY>(Arena*);
template<> ::messaging::VICON* Arena::CreateMaybeMessage<::messaging::VICON>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messaging {

enum PROPERTY_NAME : int {
  PROPERTY_NAME_IMU = 0,
  PROPERTY_NAME_VICON = 1,
  PROPERTY_NAME_PROPERTY_NAME_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PROPERTY_NAME_PROPERTY_NAME_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PROPERTY_NAME_IsValid(int value);
constexpr PROPERTY_NAME PROPERTY_NAME_NAME_MIN = PROPERTY_NAME_IMU;
constexpr PROPERTY_NAME PROPERTY_NAME_NAME_MAX = PROPERTY_NAME_VICON;
constexpr int PROPERTY_NAME_NAME_ARRAYSIZE = PROPERTY_NAME_NAME_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PROPERTY_NAME_descriptor();
template<typename T>
inline const std::string& PROPERTY_NAME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PROPERTY_NAME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PROPERTY_NAME_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PROPERTY_NAME_descriptor(), enum_t_value);
}
inline bool PROPERTY_NAME_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PROPERTY_NAME* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PROPERTY_NAME>(
    PROPERTY_NAME_descriptor(), name, value);
}
// ===================================================================

class IMU final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.IMU) */ {
 public:
  inline IMU() : IMU(nullptr) {}
  ~IMU() override;
  explicit constexpr IMU(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMU(const IMU& from);
  IMU(IMU&& from) noexcept
    : IMU() {
    *this = ::std::move(from);
  }

  inline IMU& operator=(const IMU& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU& operator=(IMU&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMU& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU* internal_default_instance() {
    return reinterpret_cast<const IMU*>(
               &_IMU_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMU& a, IMU& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU* New() const final {
    return new IMU();
  }

  IMU* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU& from);
  void MergeFrom(const IMU& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.IMU";
  }
  protected:
  explicit IMU(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuaternionFieldNumber = 1,
    kRpyFieldNumber = 2,
    kGyroFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // repeated double quaternion = 1;
  int quaternion_size() const;
  private:
  int _internal_quaternion_size() const;
  public:
  void clear_quaternion();
  private:
  double _internal_quaternion(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_quaternion() const;
  void _internal_add_quaternion(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_quaternion();
  public:
  double quaternion(int index) const;
  void set_quaternion(int index, double value);
  void add_quaternion(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      quaternion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_quaternion();

  // repeated double rpy = 2;
  int rpy_size() const;
  private:
  int _internal_rpy_size() const;
  public:
  void clear_rpy();
  private:
  double _internal_rpy(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rpy() const;
  void _internal_add_rpy(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rpy();
  public:
  double rpy(int index) const;
  void set_rpy(int index, double value);
  void add_rpy(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rpy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rpy();

  // repeated double gyro = 3;
  int gyro_size() const;
  private:
  int _internal_gyro_size() const;
  public:
  void clear_gyro();
  private:
  double _internal_gyro(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_gyro() const;
  void _internal_add_gyro(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_gyro();
  public:
  double gyro(int index) const;
  void set_gyro(int index, double value);
  void add_gyro(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      gyro() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_gyro();

  // double time = 4;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.IMU)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > quaternion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rpy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > gyro_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class VICON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.VICON) */ {
 public:
  inline VICON() : VICON(nullptr) {}
  ~VICON() override;
  explicit constexpr VICON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VICON(const VICON& from);
  VICON(VICON&& from) noexcept
    : VICON() {
    *this = ::std::move(from);
  }

  inline VICON& operator=(const VICON& from) {
    CopyFrom(from);
    return *this;
  }
  inline VICON& operator=(VICON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VICON& default_instance() {
    return *internal_default_instance();
  }
  static inline const VICON* internal_default_instance() {
    return reinterpret_cast<const VICON*>(
               &_VICON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VICON& a, VICON& b) {
    a.Swap(&b);
  }
  inline void Swap(VICON* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VICON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VICON* New() const final {
    return new VICON();
  }

  VICON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VICON>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VICON& from);
  void MergeFrom(const VICON& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VICON* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.VICON";
  }
  protected:
  explicit VICON(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kQuaternionFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // repeated double position = 1;
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double quaternion = 2;
  int quaternion_size() const;
  private:
  int _internal_quaternion_size() const;
  public:
  void clear_quaternion();
  private:
  double _internal_quaternion(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_quaternion() const;
  void _internal_add_quaternion(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_quaternion();
  public:
  double quaternion(int index) const;
  void set_quaternion(int index, double value);
  void add_quaternion(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      quaternion() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_quaternion();

  // double time = 3;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:messaging.VICON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > quaternion_;
  double time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PROPERTY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messaging.PROPERTY) */ {
 public:
  inline PROPERTY() : PROPERTY(nullptr) {}
  ~PROPERTY() override;
  explicit constexpr PROPERTY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PROPERTY(const PROPERTY& from);
  PROPERTY(PROPERTY&& from) noexcept
    : PROPERTY() {
    *this = ::std::move(from);
  }

  inline PROPERTY& operator=(const PROPERTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline PROPERTY& operator=(PROPERTY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PROPERTY& default_instance() {
    return *internal_default_instance();
  }
  static inline const PROPERTY* internal_default_instance() {
    return reinterpret_cast<const PROPERTY*>(
               &_PROPERTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PROPERTY& a, PROPERTY& b) {
    a.Swap(&b);
  }
  inline void Swap(PROPERTY* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PROPERTY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PROPERTY* New() const final {
    return new PROPERTY();
  }

  PROPERTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PROPERTY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PROPERTY& from);
  void MergeFrom(const PROPERTY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PROPERTY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messaging.PROPERTY";
  }
  protected:
  explicit PROPERTY(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PROPERTY_NAME NAME;
  static constexpr NAME IMU =
    PROPERTY_NAME_IMU;
  static constexpr NAME VICON =
    PROPERTY_NAME_VICON;
  static inline bool NAME_IsValid(int value) {
    return PROPERTY_NAME_IsValid(value);
  }
  static constexpr NAME NAME_MIN =
    PROPERTY_NAME_NAME_MIN;
  static constexpr NAME NAME_MAX =
    PROPERTY_NAME_NAME_MAX;
  static constexpr int NAME_ARRAYSIZE =
    PROPERTY_NAME_NAME_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NAME_descriptor() {
    return PROPERTY_NAME_descriptor();
  }
  template<typename T>
  static inline const std::string& NAME_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NAME>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NAME_Name.");
    return PROPERTY_NAME_Name(enum_t_value);
  }
  static inline bool NAME_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NAME* value) {
    return PROPERTY_NAME_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:messaging.PROPERTY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMU

// repeated double quaternion = 1;
inline int IMU::_internal_quaternion_size() const {
  return quaternion_.size();
}
inline int IMU::quaternion_size() const {
  return _internal_quaternion_size();
}
inline void IMU::clear_quaternion() {
  quaternion_.Clear();
}
inline double IMU::_internal_quaternion(int index) const {
  return quaternion_.Get(index);
}
inline double IMU::quaternion(int index) const {
  // @@protoc_insertion_point(field_get:messaging.IMU.quaternion)
  return _internal_quaternion(index);
}
inline void IMU::set_quaternion(int index, double value) {
  quaternion_.Set(index, value);
  // @@protoc_insertion_point(field_set:messaging.IMU.quaternion)
}
inline void IMU::_internal_add_quaternion(double value) {
  quaternion_.Add(value);
}
inline void IMU::add_quaternion(double value) {
  _internal_add_quaternion(value);
  // @@protoc_insertion_point(field_add:messaging.IMU.quaternion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IMU::_internal_quaternion() const {
  return quaternion_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IMU::quaternion() const {
  // @@protoc_insertion_point(field_list:messaging.IMU.quaternion)
  return _internal_quaternion();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IMU::_internal_mutable_quaternion() {
  return &quaternion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IMU::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable_list:messaging.IMU.quaternion)
  return _internal_mutable_quaternion();
}

// repeated double rpy = 2;
inline int IMU::_internal_rpy_size() const {
  return rpy_.size();
}
inline int IMU::rpy_size() const {
  return _internal_rpy_size();
}
inline void IMU::clear_rpy() {
  rpy_.Clear();
}
inline double IMU::_internal_rpy(int index) const {
  return rpy_.Get(index);
}
inline double IMU::rpy(int index) const {
  // @@protoc_insertion_point(field_get:messaging.IMU.rpy)
  return _internal_rpy(index);
}
inline void IMU::set_rpy(int index, double value) {
  rpy_.Set(index, value);
  // @@protoc_insertion_point(field_set:messaging.IMU.rpy)
}
inline void IMU::_internal_add_rpy(double value) {
  rpy_.Add(value);
}
inline void IMU::add_rpy(double value) {
  _internal_add_rpy(value);
  // @@protoc_insertion_point(field_add:messaging.IMU.rpy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IMU::_internal_rpy() const {
  return rpy_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IMU::rpy() const {
  // @@protoc_insertion_point(field_list:messaging.IMU.rpy)
  return _internal_rpy();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IMU::_internal_mutable_rpy() {
  return &rpy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IMU::mutable_rpy() {
  // @@protoc_insertion_point(field_mutable_list:messaging.IMU.rpy)
  return _internal_mutable_rpy();
}

// repeated double gyro = 3;
inline int IMU::_internal_gyro_size() const {
  return gyro_.size();
}
inline int IMU::gyro_size() const {
  return _internal_gyro_size();
}
inline void IMU::clear_gyro() {
  gyro_.Clear();
}
inline double IMU::_internal_gyro(int index) const {
  return gyro_.Get(index);
}
inline double IMU::gyro(int index) const {
  // @@protoc_insertion_point(field_get:messaging.IMU.gyro)
  return _internal_gyro(index);
}
inline void IMU::set_gyro(int index, double value) {
  gyro_.Set(index, value);
  // @@protoc_insertion_point(field_set:messaging.IMU.gyro)
}
inline void IMU::_internal_add_gyro(double value) {
  gyro_.Add(value);
}
inline void IMU::add_gyro(double value) {
  _internal_add_gyro(value);
  // @@protoc_insertion_point(field_add:messaging.IMU.gyro)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IMU::_internal_gyro() const {
  return gyro_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
IMU::gyro() const {
  // @@protoc_insertion_point(field_list:messaging.IMU.gyro)
  return _internal_gyro();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IMU::_internal_mutable_gyro() {
  return &gyro_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
IMU::mutable_gyro() {
  // @@protoc_insertion_point(field_mutable_list:messaging.IMU.gyro)
  return _internal_mutable_gyro();
}

// double time = 4;
inline void IMU::clear_time() {
  time_ = 0;
}
inline double IMU::_internal_time() const {
  return time_;
}
inline double IMU::time() const {
  // @@protoc_insertion_point(field_get:messaging.IMU.time)
  return _internal_time();
}
inline void IMU::_internal_set_time(double value) {
  
  time_ = value;
}
inline void IMU::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.IMU.time)
}

// -------------------------------------------------------------------

// VICON

// repeated double position = 1;
inline int VICON::_internal_position_size() const {
  return position_.size();
}
inline int VICON::position_size() const {
  return _internal_position_size();
}
inline void VICON::clear_position() {
  position_.Clear();
}
inline double VICON::_internal_position(int index) const {
  return position_.Get(index);
}
inline double VICON::position(int index) const {
  // @@protoc_insertion_point(field_get:messaging.VICON.position)
  return _internal_position(index);
}
inline void VICON::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:messaging.VICON.position)
}
inline void VICON::_internal_add_position(double value) {
  position_.Add(value);
}
inline void VICON::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:messaging.VICON.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VICON::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VICON::position() const {
  // @@protoc_insertion_point(field_list:messaging.VICON.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VICON::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VICON::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:messaging.VICON.position)
  return _internal_mutable_position();
}

// repeated double quaternion = 2;
inline int VICON::_internal_quaternion_size() const {
  return quaternion_.size();
}
inline int VICON::quaternion_size() const {
  return _internal_quaternion_size();
}
inline void VICON::clear_quaternion() {
  quaternion_.Clear();
}
inline double VICON::_internal_quaternion(int index) const {
  return quaternion_.Get(index);
}
inline double VICON::quaternion(int index) const {
  // @@protoc_insertion_point(field_get:messaging.VICON.quaternion)
  return _internal_quaternion(index);
}
inline void VICON::set_quaternion(int index, double value) {
  quaternion_.Set(index, value);
  // @@protoc_insertion_point(field_set:messaging.VICON.quaternion)
}
inline void VICON::_internal_add_quaternion(double value) {
  quaternion_.Add(value);
}
inline void VICON::add_quaternion(double value) {
  _internal_add_quaternion(value);
  // @@protoc_insertion_point(field_add:messaging.VICON.quaternion)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VICON::_internal_quaternion() const {
  return quaternion_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VICON::quaternion() const {
  // @@protoc_insertion_point(field_list:messaging.VICON.quaternion)
  return _internal_quaternion();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VICON::_internal_mutable_quaternion() {
  return &quaternion_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VICON::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable_list:messaging.VICON.quaternion)
  return _internal_mutable_quaternion();
}

// double time = 3;
inline void VICON::clear_time() {
  time_ = 0;
}
inline double VICON::_internal_time() const {
  return time_;
}
inline double VICON::time() const {
  // @@protoc_insertion_point(field_get:messaging.VICON.time)
  return _internal_time();
}
inline void VICON::_internal_set_time(double value) {
  
  time_ = value;
}
inline void VICON::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:messaging.VICON.time)
}

// -------------------------------------------------------------------

// PROPERTY

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messaging

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::messaging::PROPERTY_NAME> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messaging::PROPERTY_NAME>() {
  return ::messaging::PROPERTY_NAME_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
